<Workflow>

  <Objective>implement CRUD operations for Postgresql schema</Objective>

  <Parameter name="schema_path" type="input" description="Postgresql schema .sql file"
    required="true" />
  <Parameter name="sql_target_path" type="output"
    description="output directory path of generated SQL files" required="true" />
  <Parameter name="model_target_path" type="output"
    description="output directory path of generated Rust type binding models" required="true" />
  <Parameter name="repository_target_path" type="output"
    description="output directory path of generated Rust data access repositories" required="true" />
  <Parameter name="graphql_target_path" type="output"
    description="output directory path of generated Rust graphql resolvers" required="true" />

  <Execution>
    <Task id="list-schema-tables">
      <Step>list all tables in {{schema_path}} as {{table_name}} list</Step>
      <Pick>choose tables</Pick>
    </Task>

    <Task id="generate-sql-operation-per-table" dependsOn="list-schema-tables">
      <Wait />
      <Step>
        generate SQL operation in .sql files at {{sql_target_path}} from from each table
        {{table_name}} of schema {{schema_path}}
      </Step>

      <Rule>never inline SQL in Rust, instead create sql files and then import them using
        include_str macro</Rule>
      <Rule>always update mod.rs in sql modules to reflect sql filename changes</Rule>

      <Parameter name="table_name" type="input" description="output directory path of generated SQL"
        required="true" />
    </Task>

    <Task>
      <Step>In a structured markdown table format, highlight the alignment of sql files to
        corresponding schema and detect inconsistencies.</Step>
      <Wait />
    </Task>

    <Task id="generate-rust-type-binding-models">
      <Step>for each of the tables in {{schema_path}} generate Rust type binding models at
        {{model_target_path}}</Step>

      <Rule>Rust models should be implemented with tokio_postgres and also should have async_graphql
        decorator</Rule>
      <Rule>postgresql enums should be implemented as well in Rust with tokio_postgres crate and
        FromSql/ToSql traits too</Rule>
      <Rule>Follow existing models patterns to correctly implement the models and enum types</Rule>
      <Rule>Each model with corresponding enums should be implemented in a separate module file
        nested under schema folders.</Rule>
    </Task>

    <Task>
      <Step>In a structured markdown table format, highlight the alignment of models to
        corresponding database schema and detect inconsistencies.</Step>
      <Wait />
    </Task>

    <Task id="generate-rust-access-data-repository">
      <Step>for each of the SQL operations in {{sql_target_path}} implement Rust data access
        repository at {{repository_target_path}}</Step>

      <Rule>do not introduce rust traits for the repository instead create the struct and
        implementation for each repository</Rule>
      <Rule>rust models and enums should be imported from {{model_target_path}}implementations and
        never use inline SQL within Rust</Rule>
      <Rule>use crate::server::connection::PostgresPool; instead of deadpool_postgres::Pool
        directly, check existing implementations for pattern examples</Rule>
      <Rule>consistently add log::debug for each method</Rule>
      <Rule>Fields with DEFAULT CURRENT_TIMESTAMP should not be explicitly set in SQL operations;
        their values will be generated automatically by PostgreSQL</Rule>
    </Task>

    <Task id="generate-rust-graphql-resolvers">
      <Step>for each of the rust data access respository at {{repository_target_path}} implement
        async_graphql resolvers at {{graphql_target_path}}</Step>

      <Rule>follow existing resolvers implementations patterns and tools</Rule>
      <Rule>
        each resolver method should be by default guarded with:
        #[graphql(guard = "AuthorizeUser {
        namespace: \"Group\".to_string(),
        object: \"admin\".to_string(),
        relation: \"member\".to_string()
        }")]
      </Rule>
      <Rule> each resolver method should have parameter for &self, _ctx: &Context<'_>, followed by
        parameters if any </Rule>
      <Rule>return repository result in Result type</Rule>
      <Rule>graphql method names should always include their struct name to prevent conflicts when
        merging the structs</Rule>
    </Task>

    <Task>
      <Step>check consistency across all layers Database schema definitions, Rust model structs and
        Enums, SQL operations, Repository implementations.</Step>
    </Task>

    <Task id="react-graphql">
      <Step>align graphql query documents with graphql schema</Step>
      <Step>align React components with generated Codegen graphql.ts type definitions</Step>
    </Task>
  </Execution>

  <Rules>
    <Rule>each .sql file must contain a single sql operation</Rule>
    <Rule>organize in folder per table</Rule>
    <Rule>always check if existing files corresponding to the implementation are present, if so
      modify them as necessary</Rule>
    <Rule>add comments to SQL with types details from corresponding schema</Rule>
    <Rule>Rust models should be consistent with database schema</Rule>
    <Rule>if Rust model already exist consider updating it if necessary</Rule>
    <Rule>when multiple related implementations in a single file are detected ask to refactor
      implementations into separate modules in nested folders</Rule>
  </Rules>

</Workflow>