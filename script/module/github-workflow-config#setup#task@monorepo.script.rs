#!/usr/bin/env rust-script
//! ```cargo
//! [dependencies]
//! log = "0.4.26"
//! env_logger = "0.11.6"
//! walkdir = "2"
//! ignore = "0.4"
//! fs_extra = "1.3"
//! ```

use env_logger;
use fs_extra::dir::{copy, CopyOptions};
use ignore::WalkBuilder;
use log;
use std::env;
use std::fs;
use std::io::Read;
use std::path::{Path, PathBuf};

fn find_github_workflows(dir: &str, max_depth: usize) -> Vec<PathBuf> {
    WalkBuilder::new(dir)
        .max_depth(Some(max_depth)) // Limit the depth of traversal
        .git_ignore(true) // Respect .gitignore files
        .git_global(true) // Respect global .gitignore (e.g., ~/.gitignore)
        .git_exclude(true) // Respect .git/info/exclude
        .build()
        .into_iter()
        .filter_map(|e| e.ok())
        .filter(|e| {
            e.file_type().map(|ft| ft.is_dir()).unwrap_or(false)
                && e.file_name()
                    .to_str()
                    .map(|s| s == "github-workflows")
                    .unwrap_or(false)
        })
        .map(|e| e.path().to_path_buf())
        .collect()
}

fn copy_workflow_files(
    workflow_dirs: Vec<PathBuf>,
    target_dir: &Path,
) -> Result<(), Box<dyn std::error::Error>> {
    // Ensure the target directory exists
    if !target_dir.exists() {
        fs::create_dir_all(target_dir)?;
    }

    for source_dir in workflow_dirs {
        log::info!("Processing directory: {:?}", source_dir);
        // Read the contents of the source directory
        if let Ok(entries) = fs::read_dir(&source_dir) {
            for entry in entries.filter_map(Result::ok) {
                let source_path = entry.path();
                // Only copy files, not subdirectories
                if source_path.is_file() {
                    let file_name = source_path.file_name().ok_or("No file name")?;
                    // Add "autogenerated-" prefix to the filename
                    let new_file_name = format!("autogenerated-{}", file_name.to_string_lossy());
                    let target_path = target_dir.join(new_file_name);
                    log::info!("Copying {:?} to {:?}", source_path, target_path);
                    fs::copy(&source_path, &target_path)?;
                }
            }
        }
    }

    Ok(())
}

fn main() {
    env_logger::Builder::from_default_env()
        .filter_level(log::LevelFilter::Info)
        .init();

    let start_dir = "./service";
    let max_depth = 3; // Limit to # levels deep
    let target_dir = Path::new("./.github/workflows/");

    let workflow_dirs = find_github_workflows(start_dir, max_depth);

    if workflow_dirs.is_empty() {
        log::info!(
            "No 'github-workflows' directories found within {} levels.",
            max_depth
        );
        return;
    }

    log::info!(
        "Found 'github-workflows' directories within {} levels:",
        max_depth
    );
    for dir in &workflow_dirs {
        if let Some(path_str) = dir.to_str() {
            log::info!("- {}", path_str);
        }
    }

    // Copy files to target directory
    match copy_workflow_files(workflow_dirs, target_dir) {
        Ok(()) => log::info!("Successfully copied all files to {:?}", target_dir),
        Err(e) => log::error!("Error copying files: {}", e),
    }
}
