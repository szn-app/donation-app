apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: envoy-gateway-internal
  namespace: envoy-gateway-system
  annotations:
    gateway.envoyproxy.io/service-type: ClusterIP
spec:
  gatewayClassName: envoy-internal
  listeners:
    - name: http
      protocol: HTTP
      port: 80
      allowedRoutes:
        namespaces:
          from: All
---
# https://gateway.envoyproxy.io/contributions/design/security-policy/
# https://gateway.envoyproxy.io/docs/api/extension_types/#extauth
# https://gateway.envoyproxy.io/latest/tasks/security/ext-auth/
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: SecurityPolicy
metadata:
  name: internal-gateway
  namespace: envoy-gateway-system # must be same as targetRefs' namesapce
spec:
  targetRefs:
    - group: gateway.networking.k8s.io
      kind: Gateway
      name: envoy-gateway-internal
  extAuth:
    headersToExtAuth:
      - X-Forwarded-Proto
      - Authorization
      - Proxy-Authorization
      - Accept
      - Cookie
    failOpen: false
    http:
      path: "/decisions" # https://www.ory.sh/docs/oathkeeper/reference/api#tag/api/operation/decisions
      backendRefs:
        - name: oathkeeper-api
          namespace: auth
          port: 80
      # Additional new headers (while co-existing will already be overriden) to be added to the original request when forward for the backend service after authorization
      headersToBackend: 
        - app-user-id
---
# Generic allow SecurityPolicy of Gateway (envoy-gateway-system namespace) to Services (auth)
# https://gateway.envoyproxy.io/docs/api/extension_types/#securitypolicy
apiVersion: gateway.networking.k8s.io/v1beta1
kind: ReferenceGrant
metadata:
  name: allow-envoy-gateway
  namespace: auth # backend service
spec:
  from:
    - group: gateway.envoyproxy.io
      kind: SecurityPolicy
      namespace: envoy-gateway-system
  to:
    # backend service
    - group: ""
      kind: Service
