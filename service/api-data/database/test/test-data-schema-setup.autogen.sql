--- [manually copied test data/script] autogenerated from LLMs 
--------------------------------------------------------------

BEGIN;

-- Drop identity from columns and alter to allow explicit ID insertion
ALTER TABLE "user"."profile"
    ALTER COLUMN id DROP IDENTITY;

ALTER TABLE "user"."community"
    ALTER COLUMN id DROP IDENTITY;

ALTER TABLE "listing"."category"
    ALTER COLUMN id DROP IDENTITY;

ALTER TABLE "listing"."location"
    ALTER COLUMN id DROP IDENTITY;

ALTER TABLE "listing"."item"
    ALTER COLUMN id DROP IDENTITY;

ALTER TABLE "listing"."collection"
    ALTER COLUMN id DROP IDENTITY;

ALTER TABLE "listing"."media"
    ALTER COLUMN id DROP IDENTITY;

ALTER TABLE "interaction"."schedule"
    ALTER COLUMN id DROP IDENTITY;

ALTER TABLE "interaction"."pledge"
    ALTER COLUMN id DROP IDENTITY;

ALTER TABLE "interaction"."transaction"
    ALTER COLUMN id DROP IDENTITY;

ALTER TABLE "interaction"."message"
    ALTER COLUMN id DROP IDENTITY;

-- Insert test users (UUIDs)
INSERT INTO "user"."account" (id)
VALUES
  ('00000000-0000-0000-0000-000000000001'::uuid),
  ('00000000-0000-0000-0000-000000000002'::uuid),
  ('00000000-0000-0000-0000-000000000003'::uuid);

-- Insert test profiles
INSERT INTO "user"."profile" (id, name, description, type, owner, created_at, created_by)
VALUES
  (100000000000000001, 'Alice', 'Individual user Alice', 'individual', '00000000-0000-0000-0000-000000000001'::uuid, CURRENT_TIMESTAMP, '00000000-0000-0000-0000-000000000001'::uuid),
  (100000000000000002, 'Bob Org', 'An org named Bob', 'organization', '00000000-0000-0000-0000-000000000002'::uuid, CURRENT_TIMESTAMP, '00000000-0000-0000-0000-000000000002'::uuid),
  (100000000000000003, 'Charlie', 'A helpful individual', 'individual', '00000000-0000-0000-0000-000000000003'::uuid, CURRENT_TIMESTAMP, '00000000-0000-0000-0000-000000000003'::uuid),
  (100000000000000004, 'Delta Co.', 'Company providing services', 'company', '00000000-0000-0000-0000-000000000003'::uuid, CURRENT_TIMESTAMP, '00000000-0000-0000-0000-000000000003'::uuid),
  (100000000000000005, 'Echo Org', 'Community-focused organization', 'organization', '00000000-0000-0000-0000-000000000003'::uuid, CURRENT_TIMESTAMP, '00000000-0000-0000-0000-000000000003'::uuid);

SELECT a.id AS id_account, p.id as id_profile, p.name FROM "user"."profile" p INNER JOIN "user"."account" a ON p.owner = a.id;

INSERT INTO "user"."community" (id, title, description, type, owner, created_at, created_by)
VALUES
  (110000000000000001, 'Neighborhood Group', 'A local community group.', 'organized', '00000000-0000-0000-0000-000000000001'::uuid, CURRENT_TIMESTAMP, '00000000-0000-0000-0000-000000000001'::uuid),
  (110000000000000002, 'Tech Enthusiasts Group', 'A group for tech lovers.', 'organized', '00000000-0000-0000-0000-000000000002'::uuid, CURRENT_TIMESTAMP, '00000000-0000-0000-0000-000000000002'::uuid);

-- Insert test committee members
INSERT INTO "user"."committee" (id_profile, id_community, member_role)
VALUES
  (100000000000000001, 110000000000000001, 'organizer'),
  (100000000000000002, 110000000000000001, 'member'),
  (100000000000000002, 110000000000000002, 'organizer');

-- Insert test collections
INSERT INTO "listing"."collection" (id, id_community, title, visibility, type, position, created_at, updated_at)
VALUES
    (500000000000000001, 110000000000000001, 'Books Collection', 'public', 'featured', 1, CURRENT_TIMESTAMP, NULL),
    (500000000000000002, 110000000000000001, 'Clothing Collection', 'restricted', 'regular', 2, CURRENT_TIMESTAMP, NULL),
    (500000000000000003, 110000000000000002, 'Electronics Collection', 'public', 'regular', 1, CURRENT_TIMESTAMP, NULL),
    (500000000000000004, 110000000000000002, 'Gadgets Collection', 'public', 'featured', 2, CURRENT_TIMESTAMP, NULL);

SELECT 
    comm.owner AS owner_account_id,
    comm.id AS community_id,
    comm.title AS community_title,
    prof.id AS organizer_profile_id,
    prof.name AS organizer_profile_name,
    coll.id AS collection_id,
    coll.title AS collection_title,
    coll.position AS collection_position
FROM "user"."community" comm
JOIN "listing"."collection" coll ON coll.id_community = comm.id
JOIN "user"."committee" com ON com.id_community = comm.id AND com.member_role = 'organizer'
JOIN "user"."profile" prof ON prof.id = com.id_profile
ORDER BY comm.owner, coll.position;

-------------------------------------------------------------------------

-- Insert test categories 
INSERT INTO "listing"."category" (id, title)
VALUES
  (200000000000000001, 'Books'),
  (200000000000000002, 'Clothing');

-- Insert test locations 
INSERT INTO "listing"."location" (id, address_line1, city, country)
VALUES
  (210000000000000001, '123 Main St', 'Springfield', 'USA'),
  (210000000000000002, '456 Side St', 'Shelbyville', 'USA');

-- Insert test items 
INSERT INTO "listing"."item" (id, type, intent_action, condition, title, description, category, location, created_by)
VALUES
  (220000000000000001, 'inkind', 'offer', 'brand_new', 'Set of books', 'A full set of new books.', 200000000000000001, 210000000000000001, '00000000-0000-0000-0000-000000000001'::uuid),
  (220000000000000002, 'service', 'request', 'pre_owned_usable', 'Tutoring Help', 'Need help with math tutoring.', 200000000000000002, 210000000000000002, '00000000-0000-0000-0000-000000000002'::uuid),
  (220000000000000003, 'inkind', 'offer', 'pre_owned_barely_used', 'Vintage Jacket', 'A barely used vintage jacket in great condition.', 200000000000000002, 210000000000000001, '00000000-0000-0000-0000-000000000001'::uuid),
  (220000000000000004, 'monetary', 'offer', 'brand_new', 'Gift Card', 'A $50 gift card for any store.', 200000000000000001, 210000000000000002, '00000000-0000-0000-0000-000000000002'::uuid),
  (220000000000000005, 'inquiry', 'request', 'pre_owned_usable', 'Laptop Repair', 'Looking for someone to help repair my laptop.', 200000000000000001, 210000000000000001, '00000000-0000-0000-0000-000000000001'::uuid),
  (220000000000000006, 'service', 'offer', 'pre_owned_usable', 'Personal Training', 'Offering personal training sessions.', 200000000000000002, 210000000000000002, '00000000-0000-0000-0000-000000000002'::uuid);

-- Insert test media 
INSERT INTO "listing"."media" (id, id_item, url, type)
VALUES
  (230000000000000001, 220000000000000001, 'https://example.com/book.jpg', 'image'),
  (230000000000000002, 220000000000000002, 'https://example.com/tutor.jpg', 'image'),
  (230000000000000003, 220000000000000003, 'https://example.com/jacket.jpg', 'image'),
  (230000000000000004, 220000000000000004, 'https://example.com/giftcard.jpg', 'image'),
  (230000000000000005, 220000000000000005, 'https://example.com/laptop.jpg', 'image'),
  (230000000000000006, 220000000000000006, 'https://example.com/training.jpg', 'image');

-- Insert publishing records for items into collections
INSERT INTO "listing"."publish" (id_item, id_collection, note, position, added_by, posted_on)
VALUES
  -- Publishing 'Books Collection'
  (220000000000000001, 500000000000000001, 'Set of books now available for donation.', 1, '00000000-0000-0000-0000-000000000001'::uuid, CURRENT_TIMESTAMP),
  (220000000000000002, 500000000000000001, 'Need help with math tutoring?', 2, '00000000-0000-0000-0000-000000000002'::uuid, CURRENT_TIMESTAMP),
  
  -- Publishing 'Clothing Collection'
  (220000000000000003, 500000000000000002, 'Vintage jacket available for trade.', 1, '00000000-0000-0000-0000-000000000001'::uuid, CURRENT_TIMESTAMP),
  (220000000000000004, 500000000000000002, 'Gift card worth $50 available for purchase.', 2, '00000000-0000-0000-0000-000000000002'::uuid, CURRENT_TIMESTAMP),
  
  -- Publishing 'Electronics Collection'
  (220000000000000005, 500000000000000003, 'Looking for someone to help repair my laptop.', 1, '00000000-0000-0000-0000-000000000001'::uuid, CURRENT_TIMESTAMP),
  (220000000000000006, 500000000000000003, 'Offering personal training sessions with a focus on tech.', 2, '00000000-0000-0000-0000-000000000002'::uuid, CURRENT_TIMESTAMP);

-- Find all items created by user
SELECT i.title, i.description
FROM "listing"."item" i
JOIN "user"."account" u ON i.created_by = u.id
WHERE u.id = '00000000-0000-0000-0000-000000000001'::uuid;

-- Count number of members per community
SELECT c.id_community, COUNT(*) as member_count
FROM "user"."committee" c
GROUP BY c.id_community;

-- merge enteries for collections, communities, items
SELECT 
    com.id AS community_id,
    com.title AS community_title,
    col.id AS collection_id,
    col.title AS collection_title,
    col.position AS collection_position,
    itm.id AS item_id,
    itm.title AS item_title,
    itm.description AS item_description,
    itm.type AS item_type,
    itm.intent_action,
    itm.condition,
    itm.status,
    pub.position AS item_position
FROM "listing"."publish" pub
JOIN "listing"."collection" col ON pub.id_collection = col.id
JOIN "user"."community" com ON col.id_community = com.id
JOIN "listing"."item" itm ON pub.id_item = itm.id
ORDER BY com.id, col.position, pub.position;

--------------------------------------------------------------------------

-- Insert test pledges 
INSERT INTO "interaction"."pledge" (id, id_profile, id_item, intent_action, message, status)
VALUES
  (300000000000000001, 100000000000000001, 220000000000000002, 'give', 'Happy to help with tutoring.', 'approved'),
  (300000000000000002, 100000000000000003, 220000000000000001, 'receive', 'Interested in the books.', 'pending'),
  (300000000000000003, 100000000000000004, 220000000000000002, 'give', 'We can offer tutoring services.', 'approved'),
  (300000000000000004, 100000000000000005, 220000000000000001, 'receive', 'Need the books for our community center.', 'approved');

-- Insert test transaction 
INSERT INTO "interaction"."transaction" (id, id_pledge, status)
VALUES
  (310000000000000001, 300000000000000001, 'inprogress'), 
  (310000000000000002, 300000000000000003, 'inprogress'),
  (310000000000000003, 300000000000000004, 'inprogress');

-- Insert test messages 
INSERT INTO "interaction"."message" (id, id_sender, id_transaction, type, content)
VALUES
  -- Messages for transaction 310000000000000001
  (320000000000000001, 100000000000000001, 310000000000000001, 'text', 'Let''s schedule this!'),
  (320000000000000002, 100000000000000003, 310000000000000001, 'schedule_opportunity', 'Available on Friday from 2pm-4pm.'),

  -- Messages for transaction 310000000000000002
  (320000000000000003, 100000000000000003, 310000000000000002, 'text', 'Looking forward to it!'),
  (320000000000000004, 100000000000000001, 310000000000000002, 'schedule_opportunity', 'Can meet on Saturday morning.'),

  -- Messages for transaction 310000000000000003
  (320000000000000005, 100000000000000004, 310000000000000003, 'text', 'I can help next week!'),
  (320000000000000006, 100000000000000005, 310000000000000003, 'schedule_opportunity', 'I''m free on Monday afternoon.');

-- Insert test review 
INSERT INTO "interaction"."review" (id_transaction, id_subject_profile, reviewer, comment, score)
VALUES
  -- Score review for transaction 310000000000000001
  (310000000000000001, 100000000000000002, 100000000000000001, 'Great experience.', 5),

  -- Score review for transaction 310000000000000002
  (310000000000000002, 100000000000000004, 100000000000000003, 'Very helpful, would recommend!', 4),

  -- Score review for transaction 310000000000000003
  (310000000000000003, 100000000000000005, 100000000000000004, 'Excellent service and communication.', 5);

-- Check transaction status
SELECT t.id, t.status, p.intent_action, i.title
FROM "interaction"."transaction" t
JOIN "interaction"."pledge" p ON t.id_pledge = p.id
JOIN "listing"."item" i ON p.id_item = i.id;

-- merge transactions, pledges, items enteries
SELECT
  t.id AS transaction_id,
  t.status AS transaction_status,

  p.id AS pledge_id,
  p.intent_action AS pledge_intent,
  p.message AS pledge_message,
  p.status AS pledge_status,
  p.id_profile AS pledger_profile_id,

  i.id AS item_id,
  i.title AS item_title,
  i.type AS item_type,
  i.intent_action AS item_action,
  i.condition AS item_condition,

  COALESCE(m.message_count, 0) AS message_count

FROM interaction.transaction t
JOIN interaction.pledge p ON t.id_pledge = p.id
JOIN listing.item i ON p.id_item = i.id
LEFT JOIN (
  SELECT id_transaction, COUNT(*) AS message_count
  FROM interaction.message
  GROUP BY id_transaction
) m ON m.id_transaction = t.id

ORDER BY i.id, p.id, t.id;


ROLLBACK;
