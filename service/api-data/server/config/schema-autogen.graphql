type Account {
	id: UUID!
	remarks: String
	created_at: DateTime!
}


type Category {
	id: Int!
	title: String!
	description: String
	categoryParent: Int
	createdAt: DateTime!
	updatedAt: DateTime!
}

type Collection {
	id: Int!
	idCommunity: Int
	title: String
	visibility: CollectionVisibility!
	type: CollectionType
	position: Int!
	created_at: DateTime!
	updatedAt: DateTime
}

enum CollectionType {
	featured
	regular
}

enum CollectionVisibility {
	public
	restricted
}

type Committee {
	idProfile: Int!
	idCommunity: Int!
	memberRole: CommitteeRole!
	joined_at: DateTime!
}

enum CommitteeRole {
	organizer
	member
}

type Community {
	id: Int!
	title: String!
	description: String
	type: CommunityType!
	owner: UUID!
	created_at: DateTime!
	updatedAt: DateTime
	createdBy: UUID!
}

enum CommunityType {
	solo
	organized
}

"""
A datetime with timezone offset.

The input is a string in RFC3339 format, e.g. "2022-01-12T04:00:19.12345Z"
or "2022-01-12T04:00:19+03:00". The output is also a string in RFC3339
format, but it is always normalized to the UTC (Z) offset, e.g.
"2022-01-12T04:00:19.12345Z".
"""
scalar DateTime




type Item {
	id: Int!
	type: ItemType!
	intentAction: ItemIntentAction!
	status: ItemStatus!
	title: String
	description: String
	category: Int
	condition: ItemCondition!
	location: Int
	viewsCount: Int!
	isReported: Boolean!
	created_at: DateTime!
	updatedAt: DateTime
	createdBy: UUID
}

enum ItemCondition {
	brand_new
	pre_owned_barely_used
	pre_owned_usable
	pre_owned_damaged
}

enum ItemIntentAction {
	request
	offer
}

enum ItemStatus {
	draft
	active
	disabled
	archived
}

enum ItemType {
	inkind
	inquiry
	monetary
	service
}

type Location {
	id: Int!
	addressLine1: String!
	addressLine2: String
	city: String!
	state: String!
	district: String
	country: String!
	entranceNote: String
	createdAt: DateTime!
}

type Media {
	id: Int!
	idItem: Int!
	caption: String
	url: String!
	type: MediaType!
	created_at: DateTime!
}

enum MediaType {
	document
	image
	video
}

type Message {
	id: Int!
	idSender: Int
	idTransaction: Int!
	type: MessageType
	content: String!
	sent_at: DateTime!
	updatedAt: DateTime
}

enum MessageType {
	text
	schedule_opportunity
}

"""
GraphQL Mutation Root
"""
type Mutation {
	createAccount(id: UUID!, remarks: String): Account!
	updateAccount(id: UUID!, remarks: String): Account
	deleteAccount(id: UUID!): Boolean!
	createCommittee(idProfile: Int!, idCommunity: Int!, memberRole: CommitteeRole!): Committee!
	updateCommittee(idProfile: Int!, idCommunity: Int!, memberRole: CommitteeRole!): Committee
	deleteCommittee(idProfile: Int!, idCommunity: Int!): Boolean!
	createCommunity(name: String!, description: String!, type: CommunityType!, createdBy: UUID!): Community!
	updateCommunity(id: Int!, title: String!, description: String, type: CommunityType!): Community
	deleteCommunity(id: Int!): Boolean!
	createProfile(idAccount: UUID!, name: String!, description: String!): Profile!
	updateProfile(id: Int!, name: String!, description: String, type: ProfileType): Profile
	deleteProfile(id: Int!): Boolean!
	createCategory(name: String!, description: String!, parentId: Int): Category!
	updateCategory(id: Int!, name: String, description: String, parentId: Int): Category!
	deleteCategory(id: Int!): Boolean!
	createLocation(name: String!, address: String!, city: String!, state: String!, country: String!, postalCode: String!, idProfile: UUID!): Location!
	updateLocation(id: Int!, name: String, address: String, city: String, state: String, country: String, postalCode: String): Location!
	deleteLocation(id: Int!): Boolean!
	createItem(type: ItemType!, intentAction: ItemIntentAction!, title: String, description: String, category: Int, condition: ItemCondition!, location: Int, createdBy: UUID): Item!
	updateItem(id: Int!, title: String, description: String, category: Int, condition: ItemCondition!, location: Int, status: ItemStatus!): Item!
	deleteItem(id: Int!): Boolean!
	reportItem(id: Int!): Item
	createCollection(idCommunity: Int!, title: String!, visibility: CollectionVisibility!, type: CollectionType!, position: Int!): Collection!
	updateCollection(id: Int!, title: String!, visibility: CollectionVisibility!, type: CollectionType!, position: Int!): Collection!
	deleteCollection(id: Int!): Boolean!
	createMedia(idItem: Int!, url: String!, mediaType: MediaType!, position: Int!): Media!
	updateMedia(id: Int!, url: String, mediaType: MediaType, position: Int): Media!
	deleteMedia(id: Int!): Boolean!
	createPublish(idItem: Int!, idCollection: Int!, note: String, position: Int!, createdBy: UUID!): Publish!
	updatePublish(idItem: Int!, idCollection: Int!, note: String, position: Int!): Publish!
	deletePublish(idItem: Int!, idCollection: Int!): Boolean!
	create(idTransaction: Int!, idSender: UUID!, type: MessageType!, content: String!): Message!
	update(id: Int!, status: TransactionStatus!): Transaction!
}

type Pledge {
	id: Int!
	idProfile: Int!
	idItem: Int!
	intentAction: PledgeIntentAction!
	message: String
	status: PledgeStatus!
	pledged_at: DateTime!
	updatedAt: DateTime
	updatedBy: UUID
}

enum PledgeIntentAction {
	give
	receive
}

enum PledgeStatus {
	pending
	approved
	declined
}

type Profile {
	id: Int!
	name: String!
	description: String
	type: ProfileType
	owner: UUID!
	created_at: DateTime!
	updatedAt: DateTime
	createdBy: UUID!
}

enum ProfileType {
	individual
	organization
	company
}

type Publish {
	idItem: Int!
	idCollection: Int!
	note: String
	position: Int!
	addedBy: UUID
	posted_on: DateTime!
}

"""
GraphQL Query Root
"""
type Query {
	"""
	Get all accounts
	"""
	listAccounts: [Account!]!
	"""
	Get account by ID
	"""
	findAccount(id: UUID!): Account
	"""
	Get all committees
	"""
	listCommittees: [Committee!]!
	"""
	Get committee by ID
	"""
	findCommittee(id: UUID!): Committee
	"""
	Get all communities
	"""
	listCommunities: [Community!]!
	"""
	Get community by ID
	"""
	findCommunity(id: Int!): Community
	"""
	Get all profiles
	"""
	listProfiles: [Profile!]!
	"""
	Get profile by ID
	"""
	findProfile(id: Int!): Profile
	listCategories: [Category!]!
	findCategory(id: Int!): Category
	listLocations: [Location!]!
	findLocation(id: Int!): Location
	listItems: [Item!]!
	findItem(id: Int!): Item
	listCollections: [Collection!]!
	findCollection(id: Int!): Collection
	listMedia: [Media!]!
	findMedia(id: Int!): Media
	listPublishes: [Publish!]!
	findPublish(id: Int!): Publish
	listReviews: [Review!]!
	listPledges: [Pledge!]!
	findPledge(id: Int!): Pledge
	listScheduleOpportunities: [ScheduleOpportunity!]!
	findScheduleOpportunity(id: Int!): ScheduleOpportunity
	listSchedules: [Schedule!]!
	findSchedule(id: Int!): Schedule
	listTransactions: [Transaction!]!
	findTransaction(id: Int!): Transaction
	listMessages: [Message!]!
	findMessage(id: Int!): Message
	listTests: [Test!]!
	dummyTest: [String!]!
	dummyTestRequestHeader: String!
	dummyTestSecure: Test!
	dummyTestSecurePermissionCheck: Test!
	dummyTestSecureGuard: Test! @auth(permission: "required_authorization")
}

type Review {
	idTransaction: Int!
	idSubjectProfile: Int!
	reviewer: Int!
	comment: String
	score: Int!
	created_at: DateTime!
}

type Schedule {
	id: Int!
	scheduled_for: DateTime!
}

type ScheduleOpportunity {
	id: Int!
	windowStart: DateTime
	windowEnd: DateTime
}


type Test {
	i: Int!
	s: String!
	d: DateTime!
}

type Transaction {
	id: Int!
	idPledge: Int!
	status: TransactionStatus!
	idSchedule: Int
	idLocation: Int
	created_at: DateTime!
	updatedAt: DateTime
}

enum TransactionStatus {
	inprogress
	completed
	cancelled
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

directive @auth(permission: String) on FIELD_DEFINITION | OBJECT
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @specifiedBy(url: String!) on SCALAR
schema {
	query: Query
	mutation: Mutation
}
