schema {
  query: Query
  mutation: Mutation
}

directive @auth(permission: String) on FIELD_DEFINITION | OBJECT

type Account {
  createdAt: DateTime!
  id: UUID!
  remarks: String
}

type Category {
  categoryParent: Int
  createdAt: DateTime!
  description: String
  id: Int!
  title: String!
  updatedAt: DateTime!
}

type Collection {
  createdAt: DateTime!
  id: Int!
  idCommunity: Int!
  position: Int!
  title: String!
  type: CollectionType!
  updatedAt: DateTime!
  visibility: CollectionVisibility!
}

enum CollectionType {
  FEATURED
  REGULAR
}

enum CollectionVisibility {
  PUBLIC
  RESTRICTED
}

type Committee {
  idCommunity: Int!
  idProfile: Int!
  joinedAt: DateTime!
  memberRole: CommitteeRole!
}

enum CommitteeRole {
  MEMBER
  ORGANIZER
}

type Community {
  createdAt: DateTime!
  createdBy: UUID!
  description: String
  id: Int!
  owner: UUID!
  title: String
  type: CommunityType!
  updatedAt: DateTime
}

enum CommunityType {
  ORGANIZED
  SOLO
}

"""
A datetime with timezone offset.

The input is a string in RFC3339 format, e.g. "2022-01-12T04:00:19.12345Z"
or "2022-01-12T04:00:19+03:00". The output is also a string in RFC3339
format, but it is always normalized to the UTC (Z) offset, e.g.
"2022-01-12T04:00:19.12345Z".
"""
scalar DateTime

type Item {
  condition: ItemCondition!
  createdAt: DateTime!
  description: String
  id: Int!
  idCategory: Int!
  idLocation: Int!
  intentAction: ItemIntentAction!
  quantity: Int!
  status: ItemStatus!
  title: String!
  type: ItemType!
  updatedAt: DateTime!
}

enum ItemCondition {
  BRAND_NEW
  PRE_OWNED_BARELY_USED
  PRE_OWNED_DAMAGED
  PRE_OWNED_USABLE
}

enum ItemIntentAction {
  OFFER
  REQUEST
}

enum ItemStatus {
  ACTIVE
  ARCHIVED
  DISABLED
  DRAFT
}

enum ItemType {
  INQUIRY
  IN_KIND
  MONETARY
  SERVICE
}

type Location {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  createdAt: DateTime!
  district: String
  entranceNote: String
  geom: String
  id: Int!
  state: String!
  updatedAt: DateTime!
}

type Media {
  caption: String
  createdAt: DateTime!
  id: Int!
  idItem: Int!
  type: MediaType!
  updatedAt: DateTime!
  url: String!
}

enum MediaType {
  IMAGE
  VIDEO
}

type Message {
  content: String!
  createdAt: DateTime!
  id: Int!
  idSender: UUID!
  idTransaction: Int!
  type: MessageType!
  updatedAt: DateTime!
}

enum MessageType {
  SCHEDULE_OPPORTUNITY
  TEXT
}

"""GraphQL Mutation Root"""
type Mutation {
  addAccount(id: UUID!): Account!
  addCategory(description: String!, name: String!, parentId: Int): Category!
  addCollection(collectionType: CollectionType!, description: String!, idProfile: UUID!, isPublic: Boolean!, name: String!): Collection!
  addCommittee(idCommunity: Int!, idProfile: UUID!, memberRole: CommitteeRole!): Committee!
  addCommunity(communityType: CommunityType!, createdBy: UUID!, description: String!, owner: UUID!, title: String!): Community!
  addItem(condition: ItemCondition!, currency: String, description: String!, idCategory: Int!, idLocation: Int, idProfile: UUID!, intentAction: ItemIntentAction!, itemType: ItemType!, price: Float, status: ItemStatus!, title: String!): Item!
  addLocation(address: String!, city: String!, country: String!, idProfile: UUID!, name: String!, postalCode: String!, state: String!): Location!
  addMedia(idItem: Int!, mediaType: MediaType!, position: Int!, url: String!): Media!
  addMessage(content: String!, idSender: UUID!, idTransaction: Int!, type: MessageType!): Message!
  addPledge(idItem: Int!, idProfile: UUID!, intentAction: PledgeIntentAction!, message: String, status: PledgeStatus!): Pledge!
  addProfile(description: String, idAccount: UUID!, name: String!, profileType: ProfileType): Profile!
  addPublish(createdBy: UUID!, idCollection: Int!, idItem: Int!, note: String, position: Int!): Publish!
  addReview(comment: String, idSubject: Int!, idTransaction: Int!, rating: Int!): Review!
  addSchedule(scheduledFor: DateTime!): Schedule!
  addScheduleOpportunity(idOpportunity: Int!, idSchedule: Int!): ScheduleOpportunity!
  addTransaction(idLocation: Int, idPledge: Int!, idSchedule: Int, status: TransactionStatus!): Transaction!
  deleteAccount(id: UUID!): Boolean!
  deleteCategory(id: Int!): Boolean!
  deleteCollection(id: Int!): Boolean!
  """Delete a committee"""
  deleteCommittee(idCommunity: Int!, idProfile: UUID!): Boolean!
  """Delete a community"""
  deleteCommunity(id: Int!): Boolean!
  deleteItem(id: Int!): Boolean!
  deleteLocation(id: Int!): Boolean!
  deleteMedia(id: Int!): Boolean!
  deleteProfile(id: UUID!): Boolean!
  deletePublish(idCollection: Int!, idItem: Int!): Boolean!
  updateCategory(description: String, id: Int!, name: String, parentId: Int): Category!
  updateCollection(collectionType: CollectionType, description: String, id: Int!, isPublic: Boolean, name: String): Collection!
  """Update committee role"""
  updateCommitteeRole(idCommunity: Int!, idProfile: UUID!, memberRole: CommitteeRole!): Committee!
  """Update a community"""
  updateCommunity(communityType: CommunityType, description: String, id: Int!, title: String): Community!
  updateItem(condition: ItemCondition, currency: String, description: String, id: Int!, idCategory: Int, idLocation: Int, intentAction: ItemIntentAction, itemType: ItemType, price: Float, status: ItemStatus, title: String): Item!
  updateLocation(address: String, city: String, country: String, id: Int!, name: String, postalCode: String, state: String): Location!
  updateMedia(id: Int!, mediaType: MediaType, position: Int, url: String): Media!
  updatePledge(id: Int!, status: PledgeStatus!): Pledge!
  updateProfile(description: String, id: UUID!, name: String, profileType: ProfileType): Profile!
  updatePublish(idCollection: Int!, idItem: Int!, note: String, position: Int!, updatedBy: UUID!): Publish!
  updateScheduleOpportunity(id: Int!, windowEnd: DateTime!, windowStart: DateTime!): ScheduleOpportunity!
  updateTransaction(id: Int!, status: TransactionStatus!): Transaction!
}

type Pledge {
  createdAt: DateTime!
  id: Int!
  idItem: Int!
  idProfile: UUID!
  intentAction: PledgeIntentAction!
  message: String
  status: PledgeStatus!
  updatedAt: DateTime!
}

enum PledgeIntentAction {
  GIVE
  RECEIVE
}

enum PledgeStatus {
  APPROVED
  DECLINED
  PENDING
}

type Profile {
  createdAt: DateTime!
  createdBy: UUID!
  description: String
  id: Int!
  name: String
  owner: UUID!
  type: ProfileType
  updatedAt: DateTime
}

enum ProfileType {
  COMPANY
  INDIVIDUAL
  ORGANIZATION
}

type Publish {
  addedBy: UUID!
  createdAt: DateTime!
  idCollection: Int!
  idItem: Int!
  note: String
  position: Int!
  updatedAt: DateTime!
}

"""GraphQL Query Root"""
type Query {
  """Get account by ID"""
  accountById(id: UUID!): Account
  """Get all accounts"""
  accounts: [Account!]!
  """Get committee by ID"""
  committeeById(idCommunity: Int!, idProfile: UUID!): Committee
  """Get committee by profile and community"""
  committeeByProfileAndCommunity(idCommunity: Int!, idProfile: UUID!): Committee
  """Get all committees"""
  committees: [Committee!]!
  """Get committees by community"""
  committeesByCommunity(idCommunity: Int!): [Committee!]!
  """Get committees by profile"""
  committeesByProfile(idProfile: UUID!): [Committee!]!
  """Get all communities"""
  communities: [Community!]!
  """Get communities by profile"""
  communitiesByProfile(idProfile: UUID!): [Community!]!
  """Get community by ID"""
  communityById(id: Int!): Community
  dummyTest: [String!]!
  dummyTestRequestHeader: String!
  dummyTestSecure: Test!
  dummyTestSecureGuard: Test! @auth(permission: "required_authorization")
  dummyTestSecurePermissionCheck: Test!
  getCategories: [Category!]!
  getCategoriesByParent(parentId: Int): [Category!]!
  getCategoryById(id: Int!): Category
  getCollectionById(id: Int!): Collection
  getCollections: [Collection!]!
  getCollectionsByProfile(profileId: UUID!): [Collection!]!
  getItemById(id: Int!): Item
  getItems: [Item!]!
  getItemsByCategory(categoryId: Int!): [Item!]!
  getItemsByProfile(profileId: UUID!): [Item!]!
  getLocationById(id: Int!): Location
  getLocations: [Location!]!
  getLocationsByProfile(profileId: UUID!): [Location!]!
  getMedia: [Media!]!
  getMediaById(id: Int!): Media
  getMediaByItem(itemId: Int!): [Media!]!
  getMessageById(id: Int!): Message
  getMessages: [Message!]!
  getMessagesByTransaction(idTransaction: Int!): [Message!]!
  getPledgeById(id: Int!): Pledge
  getPledges: [Pledge!]!
  getPledgesByItem(idItem: Int!): [Pledge!]!
  getPledgesByProfile(idProfile: UUID!): [Pledge!]!
  getPublishById(id: Int!): Publish
  getPublishByItemAndCollection(collectionId: Int!, itemId: Int!): Publish
  getPublishes: [Publish!]!
  getPublishesByCollection(collectionId: Int!): [Publish!]!
  getPublishesByItem(itemId: Int!): [Publish!]!
  getReviewById(idSubject: Int!, idTransaction: Int!): Review
  getReviewByTransactionAndSubject(idSubject: Int!, idTransaction: Int!): Review
  getReviews: [Review!]!
  getScheduleById(id: Int!): Schedule
  getScheduleOpportunities: [ScheduleOpportunity!]!
  getScheduleOpportunityById(id: Int!): ScheduleOpportunity
  getSchedules: [Schedule!]!
  getTransactionById(id: Int!): Transaction
  getTransactions: [Transaction!]!
  getTransactionsByPledge(idPledge: Int!): [Transaction!]!
  """Get profile by account"""
  profileByAccount(idAccount: UUID!): Profile
  """Get profile by ID"""
  profileById(id: UUID!): Profile
  """Get all profiles"""
  profiles: [Profile!]!
  tests: [Test!]!
}

type Review {
  comment: String
  createdAt: DateTime!
  idSubjectProfile: UUID!
  idTransaction: Int!
  rating: Int!
  updatedAt: DateTime!
}

type Schedule {
  createdAt: DateTime!
  id: Int!
  scheduledFor: DateTime!
  updatedAt: DateTime!
}

type ScheduleOpportunity {
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
  windowEnd: DateTime!
  windowStart: DateTime!
}

type Test {
  d: DateTime!
  i: Int!
  s: String!
}

type Transaction {
  createdAt: DateTime!
  id: Int!
  idLocation: Int
  idPledge: Int!
  idSchedule: Int
  status: TransactionStatus!
  updatedAt: DateTime!
}

enum TransactionStatus {
  CANCELLED
  COMPLETED
  IN_PROGRESS
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID