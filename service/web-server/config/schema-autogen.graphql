schema {
  query: Query
  mutation: Mutation
}

"""
* Using async_graphql guards to enforce authorization, while using type system directives for metadata to mark graphql objects which require authentication
Authorization directive for marking fields or objects that require authorization.
This directive only adds metadata and does not enforce authorization.

# Parameters
* `permission` - Optional permission required for authorization
"""
directive @auth(permission: String) on FIELD_DEFINITION | OBJECT

type Account {
  createdAt: DateTime!
  id: UUID!
  remarks: String
}

type Category {
  categoryParent: Int
  description: String
  id: Int!
  title: String!
}

type Collection {
  createdAt: DateTime!
  id: Int!
  idCommunity: Int
  position: Int!
  title: String
  updatedAt: DateTime
  variant: CollectionType
  visibility: CollectionVisibility!
}

enum CollectionType {
  featured
  regular
}

enum CollectionVisibility {
  public
  restricted
}

type Committee {
  idCommunity: Int!
  idProfile: Int!
  joined_at: DateTime!
  memberRole: CommitteeRole!
}

enum CommitteeRole {
  member
  organizer
}

type Community {
  createdAt: DateTime!
  createdBy: UUID!
  description: String
  id: Int!
  owner: UUID!
  title: String!
  updatedAt: DateTime
  variant: CommunityType!
}

enum CommunityType {
  organized
  solo
}

"""
Convertion flow:
- CoordinatesInput -> GeoPoint -> PostGisPoint -> Database
- Database -> PostGisPoint -> GeoPoint -> Coordinates (for GraphQL)
"""
type Coordinates {
  latitude: Float!
  longitude: Float!
}

input CoordinatesInput {
  latitude: Float!
  longitude: Float!
}

"""
A datetime with timezone offset.

The input is a string in RFC3339 format, e.g. "2022-01-12T04:00:19.12345Z"
or "2022-01-12T04:00:19+03:00". The output is also a string in RFC3339
format, but it is always normalized to the UTC (Z) offset, e.g.
"2022-01-12T04:00:19.12345Z".
"""
scalar DateTime

type Item {
  category: Int
  condition: ItemCondition
  createdAt: DateTime!
  createdBy: UUID
  description: String
  id: Int!
  intentAction: ItemIntentAction
  isReported: Boolean!
  location: Int
  status: ItemStatus
  title: String
  updatedAt: DateTime
  variant: ItemType
  viewsCount: Int!
}

enum ItemCondition {
  brand_new
  pre_owned_barely_used
  pre_owned_damaged
  pre_owned_usable
}

enum ItemIntentAction {
  offer
  request
}

enum ItemStatus {
  active
  archived
  disabled
  draft
}

enum ItemType {
  inkind
  inquiry
  monetary
  service
}

type Location {
  addressLine1: String!
  addressLine2: String
  city: String!
  coordinates: Coordinates
  country: String!
  createdAt: DateTime!
  district: String
  entranceNote: String
  id: Int!
  state: String
}

type Media {
  caption: String
  createdAt: DateTime!
  id: Int!
  idItem: Int!
  url: String!
  variant: MediaType!
}

enum MediaType {
  document
  image
  video
}

type Message {
  content: String!
  id: Int!
  idSender: Int
  idTransaction: Int!
  sent_at: DateTime!
  updatedAt: DateTime
  variant: MessageType
}

enum MessageType {
  schedule_opportunity
  text
}

"""GraphQL Mutation Root"""
type Mutation {
  create(content: String!, idSender: UUID!, idTransaction: Int!, variant: MessageType!): Message! @auth(permission: "required_authorization")
  createAccount(id: UUID!, remarks: String): Account! @auth(permission: "required_authorization")
  createCategory(description: String!, name: String!, parentId: Int): Category! @auth(permission: "required_authorization")
  createCollection(idCommunity: Int!, position: Int!, title: String!, variant: CollectionType!, visibility: CollectionVisibility!): Collection! @auth(permission: "required_authorization")
  createCommittee(idCommunity: Int!, idProfile: Int!, memberRole: CommitteeRole!): Committee! @auth(permission: "required_authorization")
  createCommunity(createdBy: UUID!, description: String, name: String!, variant: CommunityType!): Community! @auth(permission: "required_authorization")
  createItem(category: Int, condition: ItemCondition, description: String, intentAction: ItemIntentAction, location: Int, status: ItemStatus, title: String, variant: ItemType): Item! @auth(permission: "required_authorization")
  createLocation(addressLine1: String!, addressLine2: String, city: String!, coordinates: CoordinatesInput, country: String!, district: String, entranceNote: String, state: String): Location! @auth(permission: "required_authorization")
  createMedia(idItem: Int!, mediaType: MediaType!, position: Int!, url: String!): Media! @auth(permission: "required_authorization")
  createProfile(description: String, idAccount: UUID!, name: String!): Profile! @auth(permission: "required_authorization")
  createPublish(createdBy: UUID!, idCollection: Int!, idItem: Int!, note: String, position: Int!): Publish! @auth(permission: "required_authorization")
  deleteAccount(id: UUID!): Boolean! @auth(permission: "required_authorization")
  deleteCategory(id: Int!): Boolean! @auth(permission: "required_authorization")
  deleteCollection(id: Int!): Boolean! @auth(permission: "required_authorization")
  deleteCommittee(idCommunity: Int!, idProfile: Int!): Boolean! @auth(permission: "required_authorization")
  deleteCommunity(id: Int!): Boolean! @auth(permission: "required_authorization")
  deleteItem(id: Int!): Boolean! @auth(permission: "required_authorization")
  deleteLocation(id: Int!): Boolean! @auth(permission: "required_authorization")
  deleteMedia(id: Int!): Boolean! @auth(permission: "required_authorization")
  deleteProfile(id: Int!): Boolean! @auth(permission: "required_authorization")
  deletePublish(idCollection: Int!, idItem: Int!): Boolean! @auth(permission: "required_authorization")
  reportItem(id: Int!): Item @auth(permission: "required_authorization")
  update(id: Int!, status: TransactionStatus!): Transaction! @auth(permission: "required_authorization")
  updateAccount(id: UUID!, remarks: String): Account @auth(permission: "required_authorization")
  updateCategory(description: String, id: Int!, name: String, parentId: Int): Category! @auth(permission: "required_authorization")
  updateCollection(id: Int!, position: Int!, title: String!, variant: CollectionType!, visibility: CollectionVisibility!): Collection! @auth(permission: "required_authorization")
  updateCommittee(idCommunity: Int!, idProfile: Int!, memberRole: CommitteeRole!): Committee @auth(permission: "required_authorization")
  updateCommunity(description: String, id: Int!, title: String, variant: CommunityType): Community @auth(permission: "required_authorization")
  updateItem(category: Int, condition: ItemCondition, description: String, id: Int!, location: Int, status: ItemStatus, title: String): Item! @auth(permission: "required_authorization")
  updateLocation(addressLine1: String, addressLine2: String, city: String, coordinates: CoordinatesInput, country: String, district: String, entranceNote: String, id: Int!, state: String): Location! @auth(permission: "required_authorization")
  updateMedia(id: Int!, mediaType: MediaType, position: Int, url: String): Media! @auth(permission: "required_authorization")
  updateProfile(description: String, id: Int!, name: String!, variant: ProfileType): Profile @auth(permission: "required_authorization")
  updatePublish(idCollection: Int!, idItem: Int!, note: String, position: Int!): Publish! @auth(permission: "required_authorization")
}

type Pledge {
  id: Int!
  idItem: Int!
  idProfile: Int!
  intentAction: PledgeIntentAction!
  message: String
  pledged_at: DateTime!
  status: PledgeStatus!
  updatedAt: DateTime
  updatedBy: UUID
}

enum PledgeIntentAction {
  give
  receive
}

enum PledgeStatus {
  approved
  declined
  pending
}

type Profile {
  createdAt: DateTime!
  createdBy: UUID!
  description: String
  id: Int!
  name: String
  owner: UUID!
  updatedAt: DateTime
  variant: ProfileType
}

enum ProfileType {
  company
  individual
  organization
}

type Publish {
  addedBy: UUID
  idCollection: Int!
  idItem: Int!
  note: String
  position: Int!
  posted_on: DateTime!
}

"""GraphQL Query Root"""
type Query {
  dummyTest: [String!]!
  dummyTestRequestHeader: String!
  dummyTestSecure: Test!
  dummyTestSecureGuard: Test! @auth(permission: "required_authorization")
  dummyTestSecurePermissionCheck: Test!
  """Get account by ID"""
  findAccount(id: UUID!): Account @auth(permission: "required_authorization")
  findCategory(id: Int!): Category @auth(permission: "required_authorization")
  findCollection(id: Int!): Collection @auth(permission: "required_authorization")
  """Get committee by ID"""
  findCommittee(id: UUID!): Committee @auth(permission: "required_authorization")
  """Get community by ID"""
  findCommunity(id: Int!): Community @auth(permission: "required_authorization")
  findItem(id: Int!): Item @auth(permission: "required_authorization")
  findLocation(id: Int!): Location @auth(permission: "required_authorization")
  findMedia(id: Int!): Media @auth(permission: "required_authorization")
  findMessage(id: Int!): Message @auth(permission: "required_authorization")
  findPledge(id: Int!): Pledge @auth(permission: "required_authorization")
  """Get profile by ID"""
  findProfile(id: Int!): Profile @auth(permission: "required_authorization")
  findPublish(id: Int!): Publish @auth(permission: "required_authorization")
  findSchedule(id: Int!): Schedule @auth(permission: "required_authorization")
  findScheduleOpportunity(id: Int!): ScheduleOpportunity @auth(permission: "required_authorization")
  findTransaction(id: Int!): Transaction @auth(permission: "required_authorization")
  """Get all accounts"""
  listAccounts: [Account!]! @auth(permission: "required_authorization")
  listCategories: [Category!]! @auth(permission: "required_authorization")
  listCollections: [Collection!]! @auth(permission: "required_authorization")
  """Get all committees"""
  listCommittees: [Committee!]! @auth(permission: "required_authorization")
  """Get all communities"""
  listCommunities: [Community!]! @auth(permission: "required_authorization")
  listItems(status: ItemStatus): [Item!]! @auth(permission: "required_authorization")
  listLocations: [Location!]! @auth(permission: "required_authorization")
  listMedia: [Media!]! @auth(permission: "required_authorization")
  listMessages: [Message!]! @auth(permission: "required_authorization")
  listPledges: [Pledge!]! @auth(permission: "required_authorization")
  """Get all profiles"""
  listProfiles: [Profile!]! @auth(permission: "required_authorization")
  listPublishes: [Publish!]! @auth(permission: "required_authorization")
  listReviews: [Review!]! @auth(permission: "required_authorization")
  listScheduleOpportunities: [ScheduleOpportunity!]! @auth(permission: "required_authorization")
  listSchedules: [Schedule!]! @auth(permission: "required_authorization")
  listTests: [Test!]! @auth(permission: "required_authorization")
  listTransactions: [Transaction!]! @auth(permission: "required_authorization")
}

type Review {
  comment: String
  createdAt: DateTime!
  idSubjectProfile: Int!
  idTransaction: Int!
  reviewer: Int!
  score: Int!
}

type Schedule {
  id: Int!
  scheduled_for: DateTime!
}

type ScheduleOpportunity {
  id: Int!
  windowEnd: DateTime
  windowStart: DateTime
}

type Test {
  d: DateTime!
  i: Int!
  s: String!
}

type Transaction {
  createdAt: DateTime!
  id: Int!
  idLocation: Int
  idPledge: Int!
  idSchedule: Int
  status: TransactionStatus!
  updatedAt: DateTime
}

enum TransactionStatus {
  cancelled
  completed
  inprogress
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique Identifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID