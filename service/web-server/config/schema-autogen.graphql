schema {
  query: Query
  mutation: Mutation
}

directive @auth(permission: String) on FIELD_DEFINITION | OBJECT

type Account {
  created_at: DateTime!
  id: UUID!
  remarks: String
}

type Category {
  categoryParent: Int
  createdAt: DateTime!
  description: String
  id: Int!
  title: String!
  updatedAt: DateTime!
}

type Collection {
  created_at: DateTime!
  id: Int!
  idCommunity: Int
  position: Int!
  title: String
  type: CollectionType
  updatedAt: DateTime
  visibility: CollectionVisibility!
}

enum CollectionType {
  featured
  regular
}

enum CollectionVisibility {
  public
  restricted
}

type Committee {
  idCommunity: Int!
  idProfile: Int!
  joined_at: DateTime!
  memberRole: CommitteeRole!
}

enum CommitteeRole {
  member
  organizer
}

type Community {
  createdBy: UUID!
  created_at: DateTime!
  description: String
  id: Int!
  owner: UUID!
  title: String!
  type: CommunityType!
  updatedAt: DateTime
}

enum CommunityType {
  organized
  solo
}

"""
A datetime with timezone offset.

The input is a string in RFC3339 format, e.g. "2022-01-12T04:00:19.12345Z"
or "2022-01-12T04:00:19+03:00". The output is also a string in RFC3339
format, but it is always normalized to the UTC (Z) offset, e.g.
"2022-01-12T04:00:19.12345Z".
"""
scalar DateTime

type Item {
  category: Int
  condition: ItemCondition!
  createdBy: UUID
  created_at: DateTime!
  description: String
  id: Int!
  intentAction: ItemIntentAction!
  isReported: Boolean!
  location: Int
  status: ItemStatus!
  title: String
  type: ItemType!
  updatedAt: DateTime
  viewsCount: Int!
}

enum ItemCondition {
  brand_new
  pre_owned_barely_used
  pre_owned_damaged
  pre_owned_usable
}

enum ItemIntentAction {
  offer
  request
}

enum ItemStatus {
  active
  archived
  disabled
  draft
}

enum ItemType {
  inkind
  inquiry
  monetary
  service
}

type Location {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  createdAt: DateTime!
  district: String
  entranceNote: String
  id: Int!
  state: String!
}

type Media {
  caption: String
  created_at: DateTime!
  id: Int!
  idItem: Int!
  type: MediaType!
  url: String!
}

enum MediaType {
  document
  image
  video
}

type Message {
  content: String!
  id: Int!
  idSender: Int
  idTransaction: Int!
  sent_at: DateTime!
  type: MessageType
  updatedAt: DateTime
}

enum MessageType {
  schedule_opportunity
  text
}

"""GraphQL Mutation Root"""
type Mutation {
  create(content: String!, idSender: UUID!, idTransaction: Int!, type: MessageType!): Message!
  createAccount(id: UUID!, remarks: String): Account!
  createCategory(description: String!, name: String!, parentId: Int): Category!
  createCollection(idCommunity: Int!, position: Int!, title: String!, type: CollectionType!, visibility: CollectionVisibility!): Collection!
  createCommittee(idCommunity: Int!, idProfile: Int!, memberRole: CommitteeRole!): Committee!
  createCommunity(createdBy: UUID!, description: String!, name: String!, type: CommunityType!): Community!
  createItem(category: Int, condition: ItemCondition!, createdBy: UUID, description: String, intentAction: ItemIntentAction!, location: Int, title: String, type: ItemType!): Item!
  createLocation(address: String!, city: String!, country: String!, idProfile: UUID!, name: String!, postalCode: String!, state: String!): Location!
  createMedia(idItem: Int!, mediaType: MediaType!, position: Int!, url: String!): Media!
  createProfile(description: String!, idAccount: UUID!, name: String!): Profile!
  createPublish(createdBy: UUID!, idCollection: Int!, idItem: Int!, note: String, position: Int!): Publish!
  deleteAccount(id: UUID!): Boolean!
  deleteCategory(id: Int!): Boolean!
  deleteCollection(id: Int!): Boolean!
  deleteCommittee(idCommunity: Int!, idProfile: Int!): Boolean!
  deleteCommunity(id: Int!): Boolean!
  deleteItem(id: Int!): Boolean!
  deleteLocation(id: Int!): Boolean!
  deleteMedia(id: Int!): Boolean!
  deleteProfile(id: Int!): Boolean!
  deletePublish(idCollection: Int!, idItem: Int!): Boolean!
  reportItem(id: Int!): Item
  update(id: Int!, status: TransactionStatus!): Transaction!
  updateAccount(id: UUID!, remarks: String): Account
  updateCategory(description: String, id: Int!, name: String, parentId: Int): Category!
  updateCollection(id: Int!, position: Int!, title: String!, type: CollectionType!, visibility: CollectionVisibility!): Collection!
  updateCommittee(idCommunity: Int!, idProfile: Int!, memberRole: CommitteeRole!): Committee
  updateCommunity(description: String, id: Int!, title: String!, type: CommunityType!): Community
  updateItem(category: Int, condition: ItemCondition!, description: String, id: Int!, location: Int, status: ItemStatus!, title: String): Item!
  updateLocation(address: String, city: String, country: String, id: Int!, name: String, postalCode: String, state: String): Location!
  updateMedia(id: Int!, mediaType: MediaType, position: Int, url: String): Media!
  updateProfile(description: String, id: Int!, name: String!, type: ProfileType): Profile
  updatePublish(idCollection: Int!, idItem: Int!, note: String, position: Int!): Publish!
}

type Pledge {
  id: Int!
  idItem: Int!
  idProfile: Int!
  intentAction: PledgeIntentAction!
  message: String
  pledged_at: DateTime!
  status: PledgeStatus!
  updatedAt: DateTime
  updatedBy: UUID
}

enum PledgeIntentAction {
  give
  receive
}

enum PledgeStatus {
  approved
  declined
  pending
}

type Profile {
  createdBy: UUID!
  created_at: DateTime!
  description: String
  id: Int!
  name: String!
  owner: UUID!
  type: ProfileType
  updatedAt: DateTime
}

enum ProfileType {
  company
  individual
  organization
}

type Publish {
  addedBy: UUID
  idCollection: Int!
  idItem: Int!
  note: String
  position: Int!
  posted_on: DateTime!
}

"""GraphQL Query Root"""
type Query {
  dummyTest: [String!]!
  dummyTestRequestHeader: String!
  dummyTestSecure: Test!
  dummyTestSecureGuard: Test! @auth(permission: "required_authorization")
  dummyTestSecurePermissionCheck: Test!
  """Get account by ID"""
  findAccount(id: UUID!): Account
  findCategory(id: Int!): Category
  findCollection(id: Int!): Collection
  """Get committee by ID"""
  findCommittee(id: UUID!): Committee
  """Get community by ID"""
  findCommunity(id: Int!): Community
  findItem(id: Int!): Item
  findLocation(id: Int!): Location
  findMedia(id: Int!): Media
  findMessage(id: Int!): Message
  findPledge(id: Int!): Pledge
  """Get profile by ID"""
  findProfile(id: Int!): Profile
  findPublish(id: Int!): Publish
  findSchedule(id: Int!): Schedule
  findScheduleOpportunity(id: Int!): ScheduleOpportunity
  findTransaction(id: Int!): Transaction
  """Get all accounts"""
  listAccounts: [Account!]!
  listCategories: [Category!]!
  listCollections: [Collection!]!
  """Get all committees"""
  listCommittees: [Committee!]!
  """Get all communities"""
  listCommunities: [Community!]!
  listItems: [Item!]!
  listLocations: [Location!]!
  listMedia: [Media!]!
  listMessages: [Message!]!
  listPledges: [Pledge!]!
  """Get all profiles"""
  listProfiles: [Profile!]!
  listPublishes: [Publish!]!
  listReviews: [Review!]!
  listScheduleOpportunities: [ScheduleOpportunity!]!
  listSchedules: [Schedule!]!
  listTests: [Test!]!
  listTransactions: [Transaction!]!
}

type Review {
  comment: String
  created_at: DateTime!
  idSubjectProfile: Int!
  idTransaction: Int!
  reviewer: Int!
  score: Int!
}

type Schedule {
  id: Int!
  scheduled_for: DateTime!
}

type ScheduleOpportunity {
  id: Int!
  windowEnd: DateTime
  windowStart: DateTime
}

type Test {
  d: DateTime!
  i: Int!
  s: String!
}

type Transaction {
  created_at: DateTime!
  id: Int!
  idLocation: Int
  idPledge: Int!
  idSchedule: Int
  status: TransactionStatus!
  updatedAt: DateTime
}

enum TransactionStatus {
  cancelled
  completed
  inprogress
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID