/**
 * MockDataViewer Component
 * 
 * This component displays mock data from various GraphQL queries in a tabular format.
 * It uses the DataTable component to render the data with sorting and pagination.
 * 
 * Features:
 * - Displays data for accounts, profiles, communities, committees, categories,
 *   locations, media, collections, and publishes
 * - Automatically formats data for display, including handling of null values and
 *   complex objects
 * - Shows loading and error states
 * - Requires authentication to view data
 * 
 * Usage:
 * ```tsx
 * import { MockDataViewer } from '@/app/MockDataViewer';
 * 
 * function App() {
 *   return (
 *     <div>
 *       <MockDataViewer />
 *     </div>
 *   );
 * }
 * ```
 * 
 * Note: This component requires the following context providers:
 * - AuthProvider (for authentication)
 * - QueryClientProvider (for data fetching)
 */

import React, { useState } from "react";
import { request } from "graphql-request";
import { useAuthHeaders } from "@/modules/auth/useAuthHeaders";
import { useQuery } from '@tanstack/react-query';
import { DataTable } from '@/components/ui/tables/data-table';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Loader2 } from "lucide-react";
import {
  ListAccountsDocument,
  ListProfilesDocument,
  ListCommunitiesDocument,
  ListCommitteesDocument,
  ListCategoriesDocument,
  ListLocationsDocument,
  ListMediaDocument,
  ListCollectionsDocument,
  ListPublishesDocument,
  ListAccountsQuery,
  ListProfilesQuery,
  ListCommunitiesQuery,
  ListCommitteesQuery,
  ListCategoriesQuery,
  ListLocationsQuery,
  ListMediaQuery,
  ListCollectionsQuery,
  ListPublishesQuery,
} from "@/modules/graphql/autogenerated/graphql";

/**
 * Interface representing an account in the system.
 */
interface Account {
  id: string;
  createdAt: string;
  remarks?: string | null;
}

/**
 * Interface representing a user profile.
 */
interface Profile {
  id: number;
  name?: string | null;
  description?: string | null;
  createdAt: string;
  createdBy: string;
  owner: string;
  updatedAt?: string | null;
  variant?: 'company' | 'individual' | 'organization' | null;
}

/**
 * Interface representing a community.
 */
interface Community {
  id: number;
  title: string;
  description?: string | null;
  createdAt: string;
  createdBy: string;
  owner: string;
  updatedAt?: string | null;
  variant: 'organized' | 'solo';
}

/**
 * Interface representing a committee member in a community.
 */
interface Committee {
  idCommunity: number;
  idProfile: number;
  joined_at: string;
  memberRole: 'member' | 'organizer';
}

/**
 * Interface representing a category.
 */
interface Category {
  id: number;
  title: string;
  description?: string | null;
  categoryParent?: number | null;
}

/**
 * Interface representing geographical coordinates.
 */
interface Coordinates {
  latitude: number;
  longitude: number;
}

/**
 * Interface representing a location.
 */
interface Location {
  id: number;
  addressLine1: string;
  addressLine2?: string | null;
  city: string;
  country: string;
  district?: string | null;
  state?: string | null;
  entranceNote?: string | null;
  coordinates?: Coordinates | null;
  createdAt: string;
}

/**
 * Interface representing a media item.
 */
interface Media {
  id: number;
  idItem: number;
  url: string;
  caption?: string | null;
  variant: 'document' | 'image' | 'video';
  createdAt: string;
}

/**
 * Interface representing a collection.
 */
interface Collection {
  id: number;
  title?: string | null;
  idCommunity?: number | null;
  position: number;
  variant?: 'featured' | 'regular' | null;
  visibility: 'public' | 'restricted';
  createdAt: string;
  updatedAt?: string | null;
}

/**
 * Interface representing a published item in a collection.
 */
interface Publish {
  idCollection: number;
  idItem: number;
  note?: string | null;
  position: number;
  posted_on: string;
  addedBy?: string | null;
}

/**
 * Interface representing the response from GraphQL queries.
 */
interface QueryResponse<T> {
  listAccounts?: T[];
  listProfiles?: T[];
  listCommunities?: T[];
  listCommittees?: T[];
  listCategories?: T[];
  listLocations?: T[];
  listMedia?: T[];
  listCollections?: T[];
  listPublishes?: T[];
}

/**
 * MockDataViewer component that displays mock data from various GraphQL queries.
 */
export function MockDataViewer() {
  const [activeTab, setActiveTab] = useState<string>("accounts");
  const { isAuthenticated, headers } = useAuthHeaders();

  const {
    data: accountsData,
    isLoading: isLoadingAccounts,
    error: accountsError,
  } = useQuery<ListAccountsQuery>({
    queryKey: ["accounts", headers],
    queryFn: async () => {
      if (!isAuthenticated) {
        throw new Error("Not authenticated");
      }
      return await request(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        ListAccountsDocument.toString(),
        undefined,
        headers
      );
    },
    enabled: isAuthenticated && activeTab === "accounts",
  });

  const {
    data: profilesData,
    isLoading: isLoadingProfiles,
    error: profilesError,
  } = useQuery<ListProfilesQuery>({
    queryKey: ["profiles", headers],
    queryFn: async () => {
      if (!isAuthenticated) {
        throw new Error("Not authenticated");
      }
      return await request(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        ListProfilesDocument.toString(),
        undefined,
        headers
      );
    },
    enabled: isAuthenticated && activeTab === "profiles",
  });

  const {
    data: communitiesData,
    isLoading: isLoadingCommunities,
    error: communitiesError,
  } = useQuery<ListCommunitiesQuery>({
    queryKey: ["communities", headers],
    queryFn: async () => {
      if (!isAuthenticated) {
        throw new Error("Not authenticated");
      }
      return await request(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        ListCommunitiesDocument.toString(),
        undefined,
        headers
      );
    },
    enabled: isAuthenticated && activeTab === "communities",
  });

  const {
    data: committeesData,
    isLoading: isLoadingCommittees,
    error: committeesError,
  } = useQuery<ListCommitteesQuery>({
    queryKey: ["committees", headers],
    queryFn: async () => {
      if (!isAuthenticated) {
        throw new Error("Not authenticated");
      }
      return await request(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        ListCommitteesDocument.toString(),
        undefined,
        headers
      );
    },
    enabled: isAuthenticated && activeTab === "communities",
  });

  const {
    data: categoriesData,
    isLoading: isLoadingCategories,
    error: categoriesError,
  } = useQuery<ListCategoriesQuery>({
    queryKey: ["categories", headers],
    queryFn: async () => {
      if (!isAuthenticated) {
        throw new Error("Not authenticated");
      }
      return await request(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        ListCategoriesDocument.toString(),
        undefined,
        headers
      );
    },
    enabled: isAuthenticated && activeTab === "items",
  });

  const {
    data: locationsData,
    isLoading: isLoadingLocations,
    error: locationsError,
  } = useQuery<ListLocationsQuery>({
    queryKey: ["locations", headers],
    queryFn: async () => {
      if (!isAuthenticated) {
        throw new Error("Not authenticated");
      }
      return await request(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        ListLocationsDocument.toString(),
        undefined,
        headers
      );
    },
    enabled: isAuthenticated && activeTab === "items",
  });

  const {
    data: mediaData,
    isLoading: isLoadingMedia,
    error: mediaError,
  } = useQuery<ListMediaQuery>({
    queryKey: ["media", headers],
    queryFn: async () => {
      if (!isAuthenticated) {
        throw new Error("Not authenticated");
      }
      return await request(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        ListMediaDocument.toString(),
        undefined,
        headers
      );
    },
    enabled: isAuthenticated && activeTab === "items",
  });

  const {
    data: collectionsData,
    isLoading: isLoadingCollections,
    error: collectionsError,
  } = useQuery<ListCollectionsQuery>({
    queryKey: ["collections", headers],
    queryFn: async () => {
      if (!isAuthenticated) {
        throw new Error("Not authenticated");
      }
      return await request(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        ListCollectionsDocument.toString(),
        undefined,
        headers
      );
    },
    enabled: isAuthenticated && activeTab === "collections",
  });

  const {
    data: publishesData,
    isLoading: isLoadingPublishes,
    error: publishesError,
  } = useQuery<ListPublishesQuery>({
    queryKey: ["publishes", headers],
    queryFn: async () => {
      if (!isAuthenticated) {
        throw new Error("Not authenticated");
      }
      return await request(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        ListPublishesDocument.toString(),
        undefined,
        headers
      );
    },
    enabled: isAuthenticated && activeTab === "collections",
  });

  /**
   * Renders a table with the provided data.
   * @param data - The data to display in the table
   * @param type - The type of data being displayed (e.g., "accounts", "profiles")
   * @returns A React component containing the table
   */
  const renderTable = (data: any[], type: string) => {
    const formatValue = (value: any) => {
      if (value === null || value === undefined) {
        return '';
      }
      if (typeof value === 'object') {
        if (value instanceof Date) {
          return value.toISOString();
        }
        return JSON.stringify(value);
      }
      return String(value);
    };

    const columns = {
      accounts: [
        { header: 'ID', accessorKey: 'id' },
        { header: 'Created At', accessorKey: 'createdAt' },
        { header: 'Remarks', accessorKey: 'remarks' },
      ],
      profiles: [
        { header: 'ID', accessorKey: 'id' },
        { header: 'Name', accessorKey: 'name' },
        { header: 'Description', accessorKey: 'description' },
        { header: 'Created By', accessorKey: 'createdBy' },
        { header: 'Owner', accessorKey: 'owner' },
        { header: 'Variant', accessorKey: 'variant' },
        { header: 'Created At', accessorKey: 'createdAt' },
        { header: 'Updated At', accessorKey: 'updatedAt' },
      ],
      communities: [
        { header: 'ID', accessorKey: 'id' },
        { header: 'Title', accessorKey: 'title' },
        { header: 'Description', accessorKey: 'description' },
        { header: 'Created By', accessorKey: 'createdBy' },
        { header: 'Owner', accessorKey: 'owner' },
        { header: 'Variant', accessorKey: 'variant' },
        { header: 'Created At', accessorKey: 'createdAt' },
        { header: 'Updated At', accessorKey: 'updatedAt' },
      ],
      committees: [
        { header: 'Community ID', accessorKey: 'idCommunity' },
        { header: 'Profile ID', accessorKey: 'idProfile' },
        { header: 'Joined At', accessorKey: 'joined_at' },
        { header: 'Role', accessorKey: 'memberRole' },
      ],
      categories: [
        { header: 'ID', accessorKey: 'id' },
        { header: 'Title', accessorKey: 'title' },
        { header: 'Description', accessorKey: 'description' },
        { header: 'Parent Category', accessorKey: 'categoryParent' },
      ],
      locations: [
        { header: 'ID', accessorKey: 'id' },
        { header: 'Address Line 1', accessorKey: 'addressLine1' },
        { header: 'Address Line 2', accessorKey: 'addressLine2' },
        { header: 'City', accessorKey: 'city' },
        { header: 'State', accessorKey: 'state' },
        { header: 'District', accessorKey: 'district' },
        { header: 'Country', accessorKey: 'country' },
        { header: 'Entrance Note', accessorKey: 'entranceNote' },
        { header: 'Coordinates', accessorKey: 'coordinates' },
        { header: 'Created At', accessorKey: 'createdAt' },
      ],
      media: [
        { header: 'ID', accessorKey: 'id' },
        { header: 'Item ID', accessorKey: 'idItem' },
        { header: 'URL', accessorKey: 'url' },
        { header: 'Caption', accessorKey: 'caption' },
        { header: 'Type', accessorKey: 'variant' },
        { header: 'Created At', accessorKey: 'createdAt' },
      ],
      collections: [
        { header: 'ID', accessorKey: 'id' },
        { header: 'Title', accessorKey: 'title' },
        { header: 'Community ID', accessorKey: 'idCommunity' },
        { header: 'Position', accessorKey: 'position' },
        { header: 'Type', accessorKey: 'variant' },
        { header: 'Visibility', accessorKey: 'visibility' },
        { header: 'Created At', accessorKey: 'createdAt' },
        { header: 'Updated At', accessorKey: 'updatedAt' },
      ],
      publishes: [
        { header: 'Collection ID', accessorKey: 'idCollection' },
        { header: 'Item ID', accessorKey: 'idItem' },
        { header: 'Note', accessorKey: 'note' },
        { header: 'Position', accessorKey: 'position' },
        { header: 'Posted On', accessorKey: 'posted_on' },
        { header: 'Added By', accessorKey: 'addedBy' },
      ],
    };

    const formattedData = data.map(item => {
      const formattedItem: { [key: string]: string } = {};
      Object.keys(item).forEach(key => {
        formattedItem[key] = formatValue(item[key]);
      });
      return formattedItem;
    });

    return (
      <div className="w-full overflow-hidden">
        <DataTable
          columns={columns[type as keyof typeof columns]}
          data={formattedData}
        />
      </div>
    );
  };

  /**
   * Gets the appropriate data array from the query response.
   * @param data - The query response data
   * @param type - The type of data to retrieve
   * @returns An array of items of the specified type
   */
  const getQueryData = (data: any, type: string) => {
    const queryDataMap = {
      accounts: data?.listAccounts || [],
      profiles: data?.listProfiles || [],
      communities: data?.listCommunities || [],
      committees: data?.listCommittees || [],
      categories: data?.listCategories || [],
      locations: data?.listLocations || [],
      media: data?.listMedia || [],
      collections: data?.listCollections || [],
      publishes: data?.listPublishes || [],
    };

    return queryDataMap[type as keyof typeof queryDataMap] || [];
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Mock Data Viewer</CardTitle>
        <CardDescription>View and explore mock data from the GraphQL API</CardDescription>
      </CardHeader>
      <CardContent>
        {!isAuthenticated ? (
          <Alert variant="destructive">
            <AlertTitle>Authentication Required</AlertTitle>
            <AlertDescription>Please log in to view data.</AlertDescription>
          </Alert>
        ) : (
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-5">
              <TabsTrigger value="accounts">Accounts</TabsTrigger>
              <TabsTrigger value="profiles">Profiles</TabsTrigger>
              <TabsTrigger value="communities">Communities</TabsTrigger>
              <TabsTrigger value="items">Items</TabsTrigger>
              <TabsTrigger value="collections">Collections</TabsTrigger>
            </TabsList>

            <TabsContent value="accounts">
              {isLoadingAccounts ? (
                <div className="flex items-center justify-center p-4">
                  <Loader2 className="h-6 w-6 animate-spin" />
                  <span className="ml-2">Loading accounts...</span>
                </div>
              ) : accountsError ? (
                <Alert variant="destructive">
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{accountsError.message}</AlertDescription>
                </Alert>
              ) : (
                renderTable(getQueryData(accountsData, "accounts"), "accounts")
              )}
            </TabsContent>

            <TabsContent value="profiles">
              {isLoadingProfiles ? (
                <div className="flex items-center justify-center p-4">
                  <Loader2 className="h-6 w-6 animate-spin" />
                  <span className="ml-2">Loading profiles...</span>
                </div>
              ) : profilesError ? (
                <Alert variant="destructive">
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{profilesError.message}</AlertDescription>
                </Alert>
              ) : (
                renderTable(getQueryData(profilesData, "profiles"), "profiles")
              )}
            </TabsContent>

            <TabsContent value="communities">
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-semibold mb-4">Communities</h3>
                  {isLoadingCommunities ? (
                    <div className="flex items-center justify-center p-4">
                      <Loader2 className="h-6 w-6 animate-spin" />
                      <span className="ml-2">Loading communities...</span>
                    </div>
                  ) : communitiesError ? (
                    <Alert variant="destructive">
                      <AlertTitle>Error</AlertTitle>
                      <AlertDescription>{communitiesError.message}</AlertDescription>
                    </Alert>
                  ) : (
                    renderTable(getQueryData(communitiesData, "communities"), "communities")
                  )}
                </div>

                <div>
                  <h3 className="text-lg font-semibold mb-4">Committees</h3>
                  {isLoadingCommittees ? (
                    <div className="flex items-center justify-center p-4">
                      <Loader2 className="h-6 w-6 animate-spin" />
                      <span className="ml-2">Loading committees...</span>
                    </div>
                  ) : committeesError ? (
                    <Alert variant="destructive">
                      <AlertTitle>Error</AlertTitle>
                      <AlertDescription>{committeesError.message}</AlertDescription>
                    </Alert>
                  ) : (
                    renderTable(getQueryData(committeesData, "committees"), "committees")
                  )}
                </div>
              </div>
            </TabsContent>

            <TabsContent value="items">
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-semibold mb-4">Categories</h3>
                  {isLoadingCategories ? (
                    <div className="flex items-center justify-center p-4">
                      <Loader2 className="h-6 w-6 animate-spin" />
                      <span className="ml-2">Loading categories...</span>
                    </div>
                  ) : categoriesError ? (
                    <Alert variant="destructive">
                      <AlertTitle>Error</AlertTitle>
                      <AlertDescription>{categoriesError.message}</AlertDescription>
                    </Alert>
                  ) : (
                    renderTable(getQueryData(categoriesData, "categories"), "categories")
                  )}
                </div>

                <div>
                  <h3 className="text-lg font-semibold mb-4">Locations</h3>
                  {isLoadingLocations ? (
                    <div className="flex items-center justify-center p-4">
                      <Loader2 className="h-6 w-6 animate-spin" />
                      <span className="ml-2">Loading locations...</span>
                    </div>
                  ) : locationsError ? (
                    <Alert variant="destructive">
                      <AlertTitle>Error</AlertTitle>
                      <AlertDescription>{locationsError.message}</AlertDescription>
                    </Alert>
                  ) : (
                    renderTable(getQueryData(locationsData, "locations"), "locations")
                  )}
                </div>

                <div>
                  <h3 className="text-lg font-semibold mb-4">Media</h3>
                  {isLoadingMedia ? (
                    <div className="flex items-center justify-center p-4">
                      <Loader2 className="h-6 w-6 animate-spin" />
                      <span className="ml-2">Loading media...</span>
                    </div>
                  ) : mediaError ? (
                    <Alert variant="destructive">
                      <AlertTitle>Error</AlertTitle>
                      <AlertDescription>{mediaError.message}</AlertDescription>
                    </Alert>
                  ) : (
                    renderTable(getQueryData(mediaData, "media"), "media")
                  )}
                </div>
              </div>
            </TabsContent>

            <TabsContent value="collections">
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-semibold mb-4">Collections</h3>
                  {isLoadingCollections ? (
                    <div className="flex items-center justify-center p-4">
                      <Loader2 className="h-6 w-6 animate-spin" />
                      <span className="ml-2">Loading collections...</span>
                    </div>
                  ) : collectionsError ? (
                    <Alert variant="destructive">
                      <AlertTitle>Error</AlertTitle>
                      <AlertDescription>{collectionsError.message}</AlertDescription>
                    </Alert>
                  ) : (
                    renderTable(getQueryData(collectionsData, "collections"), "collections")
                  )}
                </div>

                <div>
                  <h3 className="text-lg font-semibold mb-4">Publishes</h3>
                  {isLoadingPublishes ? (
                    <div className="flex items-center justify-center p-4">
                      <Loader2 className="h-6 w-6 animate-spin" />
                      <span className="ml-2">Loading publishes...</span>
                    </div>
                  ) : publishesError ? (
                    <Alert variant="destructive">
                      <AlertTitle>Error</AlertTitle>
                      <AlertDescription>{publishesError.message}</AlertDescription>
                    </Alert>
                  ) : (
                    renderTable(getQueryData(publishesData, "publishes"), "publishes")
                  )}
                </div>
              </div>
            </TabsContent>
          </Tabs>
        )}
      </CardContent>
    </Card>
  );
}
