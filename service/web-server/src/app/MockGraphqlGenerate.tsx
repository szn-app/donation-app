import React from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Loader2 } from "lucide-react";
import { useMutation } from "@tanstack/react-query";
import { request } from "graphql-request";
import { useAuthHeaders } from "@/modules/auth/useAuthHeaders";
import {
  CreateAccountDocument,
  CreateProfileDocument,
  CreateCommunityDocument,
  CreateCommitteeDocument,
  CreateCategoryDocument,
  CreateLocationDocument,
  CreateItemDocument,
  CreateMediaDocument,
  CreateCollectionDocument,
  CreatePublishDocument,
  CreateAccountMutation,
  CreateProfileMutation,
  CreateCommunityMutation,
  CreateCommitteeMutation,
  CreateCategoryMutation,
  CreateLocationMutation,
  CreateItemMutation,
  CreateMediaMutation,
  CreateCollectionMutation,
  CreatePublishMutation,
  CommunityType,
  CommitteeRole,
  ItemType,
  ItemIntentAction,
  ItemStatus,
  ItemCondition,
  CollectionType,
  MediaType,
  ProfileType,
  CollectionVisibility,
  UpdateItemMutation,
  UpdateItemDocument,
} from "@/modules/graphql/autogenerated/graphql";
import { faker } from "@faker-js/faker";

export function MockGraphqlGenerate() {
  const [isLoading, setIsLoading] = React.useState<string | null>(null);
  const [error, setError] = React.useState<string | null>(null);
  const [success, setSuccess] = React.useState<string | null>(null);
  const { headers, isAuthenticated } = useAuthHeaders();

  const addAccountMutation = useMutation({
    mutationKey: ["createAccount"],
    mutationFn: async (variables: { id: string }) => {
      if (!headers) throw new Error("Authentication required");
      return await request<CreateAccountMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        CreateAccountDocument.toString(),
        variables,
        headers,
      );
    },
  });

  const addProfileMutation = useMutation({
    mutationKey: ["createProfile"],
    mutationFn: async (variables: {
      idAccount: string;
      name: string;
      description?: string;
    }) => {
      if (!headers) throw new Error("Authentication required");
      return await request<CreateProfileMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        CreateProfileDocument.toString(),
        variables,
        headers,
      );
    },
  });

  const addCommunityMutation = useMutation({
    mutationKey: ["createCommunity"],
    mutationFn: async (variables: {
      name: string;
      description: string;
      variant: CommunityType;
      createdBy: string;
    }) =>
      await request<CreateCommunityMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        CreateCommunityDocument.toString(),
        variables,
        headers,
      ),
  });

  const addCommitteeMutation = useMutation({
    mutationKey: ["createCommittee"],
    mutationFn: async (variables: {
      idCommunity: number;
      idProfile: number;
      memberRole: CommitteeRole;
    }) =>
      await request<CreateCommitteeMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        CreateCommitteeDocument.toString(),
        variables,
        headers,
      ),
  });

  const addCategoryMutation = useMutation({
    mutationKey: ["createCategory"],
    mutationFn: async (variables: {
      description: string;
      name: string;
      parentId?: number;
    }) =>
      await request<CreateCategoryMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        CreateCategoryDocument.toString(),
        variables,
        headers,
      ),
  });

  const addLocationMutation = useMutation({
    mutationKey: ["createLocation"],
    mutationFn: async (variables: {
      addressLine1: string;
      addressLine2?: string;
      city: string;
      state: string;
      district?: string;
      country: string;
      coordinates?: {
        longitude: number;
        latitude: number;
      };
      entranceNote?: string;
    }) =>
      await request<CreateLocationMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        CreateLocationDocument.toString(),
        variables,
        headers,
      ),
  });

  const addItemMutation = useMutation({
    mutationKey: ["createItem"],
    mutationFn: async (variables: {
      variant: ItemType;
      intentAction: ItemIntentAction;
      title?: string;
      description?: string;
      category?: number;
      condition: ItemCondition;
      location?: number;
      status?: ItemStatus;
    }) =>
      await request<CreateItemMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        CreateItemDocument.toString(),
        variables,
        headers,
      ),
  });

  const updateItemMutation = useMutation({
    mutationKey: ["updateItem"],
    mutationFn: async (variables: {
      id: number;
      status?: ItemStatus;
      title?: string;
      description?: string;
      category?: number;
      condition?: ItemCondition;
      location?: number;
    }) =>
      await request<UpdateItemMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        UpdateItemDocument.toString(),
        variables,
        headers,
      ),
  });

  const addMediaMutation = useMutation({
    mutationKey: ["createMedia"],
    mutationFn: async (variables: {
      idItem: number;
      url: string;
      mediaType: MediaType;
      position: number;
    }) =>
      await request<CreateMediaMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        CreateMediaDocument.toString(),
        variables,
        headers,
      ),
  });

  const addCollectionMutation = useMutation({
    mutationKey: ["createCollection"],
    mutationFn: async (variables: {
      idCommunity: number;
      title: string;
      visibility: CollectionVisibility;
      variant: CollectionType;
      position: number;
    }) =>
      await request<CreateCollectionMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        CreateCollectionDocument.toString(),
        variables,
        headers,
      ),
  });

  const addPublishMutation = useMutation({
    mutationKey: ["createPublish"],
    mutationFn: async (variables: {
      createdBy: string;
      idCollection: number;
      idItem: number;
      note?: string;
      position: number;
    }) =>
      await request<CreatePublishMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        CreatePublishDocument.toString(),
        variables,
        headers,
      ),
  });

  const handleGenerate = async (variant: string) => {
    if (!isAuthenticated) {
      setError("Authentication required");
      return;
    }

    setIsLoading(variant);
    setError(null);
    setSuccess(null);

    try {
      switch (variant) {
        case "accounts": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          break;
        }
        case "profiles": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          await addProfileMutation.mutateAsync({
            idAccount: accountId,
            name: faker.person.fullName(),
            description: faker.lorem.paragraph(),
          });
          break;
        }
        case "communities": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          const profile = await addProfileMutation.mutateAsync({
            idAccount: accountId,
            name: faker.person.fullName(),
          });
          const community = await addCommunityMutation.mutateAsync({
            name: faker.company.name(),
            description: faker.lorem.paragraph(),
            variant: CommunityType.Organized,
            createdBy: accountId,
          });
          await addCommitteeMutation.mutateAsync({
            idCommunity: community.createCommunity.id,
            idProfile: profile.createProfile.id,
            memberRole: CommitteeRole.Member,
          });
          break;
        }
        case "committees": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          const profile = await addProfileMutation.mutateAsync({
            idAccount: accountId,
            name: faker.person.fullName(),
          });
          const community = await addCommunityMutation.mutateAsync({
            name: faker.company.name(),
            description: faker.lorem.paragraph(),
            variant: CommunityType.Organized,
            createdBy: accountId,
          });
          await addCommitteeMutation.mutateAsync({
            idCommunity: community.createCommunity.id,
            idProfile: profile.createProfile.id,
            memberRole: CommitteeRole.Member,
          });
          break;
        }
        case "categories": {
          await addCategoryMutation.mutateAsync({
            description: faker.lorem.sentence(),
            name: faker.commerce.department(),
          });
          break;
        }
        case "locations": {
          await addLocationMutation.mutateAsync({
            addressLine1: faker.location.streetAddress(),
            addressLine2: faker.location.secondaryAddress(),
            city: faker.location.city(),
            state: faker.location.state(),
            district: faker.location.county(),
            country: faker.location.country(),
            coordinates: {
              latitude: faker.location.latitude(),
              longitude: faker.location.longitude(),
            },
            entranceNote: faker.lorem.sentence(),
          });
          break;
        }
        case "items": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          const category = await addCategoryMutation.mutateAsync({
            description: faker.lorem.sentence(),
            name: faker.commerce.department(),
          });
          const location = await addLocationMutation.mutateAsync({
            addressLine1: faker.location.streetAddress(),
            addressLine2: faker.location.secondaryAddress(),
            city: faker.location.city(),
            state: faker.location.state(),
            district: faker.location.county(),
            country: faker.location.country(),
            coordinates: {
              latitude: faker.location.latitude(),
              longitude: faker.location.longitude(),
            },
            entranceNote: faker.lorem.sentence(),
          });
          const item = await addItemMutation.mutateAsync({
            title: faker.commerce.productName(),
            description: faker.lorem.paragraph(),
            category: category.createCategory.id,
            location: location.createLocation.id,
            variant: ItemType.Inkind,
            intentAction: ItemIntentAction.Offer,
            condition: ItemCondition.BrandNew,
            status: ItemStatus.Active,
          });
          await updateItemMutation.mutateAsync({
            id: item.createItem.id,
            condition: ItemCondition.BrandNew,
            status: ItemStatus.Active,
          });
          break;
        }
        case "media": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          const category = await addCategoryMutation.mutateAsync({
            description: faker.lorem.sentence(),
            name: faker.commerce.department(),
          });
          const location = await addLocationMutation.mutateAsync({
            addressLine1: faker.location.streetAddress(),
            addressLine2: faker.location.secondaryAddress(),
            city: faker.location.city(),
            state: faker.location.state(),
            district: faker.location.county(),
            country: faker.location.country(),
            coordinates: {
              latitude: faker.location.latitude(),
              longitude: faker.location.longitude(),
            },
            entranceNote: faker.lorem.sentence(),
          });
          const item = await addItemMutation.mutateAsync({
            title: faker.commerce.productName(),
            description: faker.lorem.paragraph(),
            category: category.createCategory.id,
            location: location.createLocation.id,
            variant: ItemType.Inkind,
            intentAction: ItemIntentAction.Offer,
            condition: ItemCondition.BrandNew,
            status: ItemStatus.Active,
          });
          await updateItemMutation.mutateAsync({
            id: item.createItem.id,
            condition: ItemCondition.BrandNew,
            status: ItemStatus.Active,
          });
          await addMediaMutation.mutateAsync({
            idItem: item.createItem.id,
            url: faker.image.url(),
            mediaType: MediaType.Image,
            position: 1,
          });
          break;
        }
        case "collections": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          const profile = await addProfileMutation.mutateAsync({
            idAccount: accountId,
            name: faker.person.fullName(),
          });
          const community = await addCommunityMutation.mutateAsync({
            name: faker.company.name(),
            description: faker.lorem.paragraph(),
            variant: CommunityType.Organized,
            createdBy: accountId,
          });
          await addCollectionMutation.mutateAsync({
            idCommunity: community.createCommunity.id,
            title: faker.commerce.productName(),
            visibility: CollectionVisibility.Public,
            variant: CollectionType.Regular,
            position: faker.number.int({ min: 1, max: 100 }),
          });
          break;
        }
        case "publishes": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          const profile = await addProfileMutation.mutateAsync({
            idAccount: accountId,
            name: faker.person.fullName(),
          });
          const community = await addCommunityMutation.mutateAsync({
            name: faker.company.name(),
            description: faker.lorem.paragraph(),
            variant: CommunityType.Organized,
            createdBy: accountId,
          });
          const collection = await addCollectionMutation.mutateAsync({
            idCommunity: community.createCommunity.id,
            title: faker.commerce.productName(),
            visibility: CollectionVisibility.Public,
            variant: CollectionType.Regular,
            position: faker.number.int({ min: 1, max: 100 }),
          });
          const category = await addCategoryMutation.mutateAsync({
            description: faker.lorem.sentence(),
            name: faker.commerce.department(),
          });
          const location = await addLocationMutation.mutateAsync({
            addressLine1: faker.location.streetAddress(),
            addressLine2: faker.location.secondaryAddress(),
            city: faker.location.city(),
            state: faker.location.state(),
            district: faker.location.county(),
            country: faker.location.country(),
            coordinates: {
              latitude: faker.location.latitude(),
              longitude: faker.location.longitude(),
            },
            entranceNote: faker.lorem.sentence(),
          });
          const item = await addItemMutation.mutateAsync({
            title: faker.commerce.productName(),
            description: faker.lorem.paragraph(),
            category: category.createCategory.id,
            location: location.createLocation.id,
            variant: ItemType.Inkind,
            intentAction: ItemIntentAction.Offer,
            condition: ItemCondition.BrandNew,
            status: ItemStatus.Active,
          });
          await updateItemMutation.mutateAsync({
            id: item.createItem.id,
            condition: ItemCondition.BrandNew,
            status: ItemStatus.Active,
          });
          await addPublishMutation.mutateAsync({
            createdBy: accountId,
            idCollection: collection.createCollection.id,
            idItem: item.createItem.id,
            note: faker.lorem.sentence(),
            position: 1,
          });
          break;
        }
        case "all": {
          // Generate accounts and profiles
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          const profile = await addProfileMutation.mutateAsync({
            idAccount: accountId,
            name: faker.person.fullName(),
            description: faker.lorem.paragraph(),
          });

          // Generate community and committee
          const community = await addCommunityMutation.mutateAsync({
            name: faker.company.name(),
            description: faker.lorem.paragraph(),
            variant: CommunityType.Organized,
            createdBy: accountId,
          });
          await addCommitteeMutation.mutateAsync({
            idCommunity: community.createCommunity.id,
            idProfile: profile.createProfile.id,
            memberRole: CommitteeRole.Member,
          });

          // Generate category and location
          const category = await addCategoryMutation.mutateAsync({
            description: faker.lorem.sentence(),
            name: faker.commerce.department(),
          });
          const location = await addLocationMutation.mutateAsync({
            addressLine1: faker.location.streetAddress(),
            addressLine2: faker.location.secondaryAddress(),
            city: faker.location.city(),
            state: faker.location.state(),
            district: faker.location.county(),
            country: faker.location.country(),
            coordinates: {
              latitude: faker.location.latitude(),
              longitude: faker.location.longitude(),
            },
            entranceNote: faker.lorem.sentence(),
          });

          // Generate item and media
          const item = await addItemMutation.mutateAsync({
            title: faker.commerce.productName(),
            description: faker.lorem.paragraph(),
            category: category.createCategory.id,
            location: location.createLocation.id,
            variant: ItemType.Inkind,
            intentAction: ItemIntentAction.Offer,
            condition: ItemCondition.BrandNew,
            status: ItemStatus.Active,
          });
          await updateItemMutation.mutateAsync({
            id: item.createItem.id,
            condition: ItemCondition.BrandNew,
            status: ItemStatus.Active,
          });
          await addMediaMutation.mutateAsync({
            idItem: item.createItem.id,
            url: faker.image.url(),
            mediaType: MediaType.Image,
            position: 1,
          });

          // Generate collection and publish
          const collection = await addCollectionMutation.mutateAsync({
            idCommunity: community.createCommunity.id,
            title: faker.commerce.productName(),
            visibility: CollectionVisibility.Public,
            variant: CollectionType.Regular,
            position: faker.number.int({ min: 1, max: 100 }),
          });
          await addPublishMutation.mutateAsync({
            createdBy: accountId,
            idCollection: collection.createCollection.id,
            idItem: item.createItem.id,
            note: faker.lorem.sentence(),
            position: 1,
          });
          break;
        }
        default:
          throw new Error(`Unknown data type: ${variant}`);
      }
      setSuccess(`Successfully generated ${variant} data`);
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
    } finally {
      setIsLoading(null);
    }
  };

  const handleClear = async () => {
    setIsLoading("clear");
    setError(null);
    setSuccess(null);

    try {
      // Clear all data by generating a new account and using it to clear related data
      const accountId = faker.string.uuid();
      await addAccountMutation.mutateAsync({ id: accountId });

      // Clear profiles
      await addProfileMutation.mutateAsync({
        idAccount: accountId,
        name: "CLEAR",
        description: "CLEAR",
      });

      // Clear communities
      await addCommunityMutation.mutateAsync({
        name: "CLEAR",
        description: "CLEAR",
        variant: CommunityType.Organized,
        createdBy: accountId,
      });

      // Clear categories
      await addCategoryMutation.mutateAsync({
        description: "CLEAR",
        name: "CLEAR",
      });

      // Clear locations
      await addLocationMutation.mutateAsync({
        addressLine1: "CLEAR",
        city: "CLEAR",
        state: "CLEAR",
        country: "CLEAR",
        coordinates: {
          latitude: 0,
          longitude: 0,
        },
      });

      // Clear items
      const category = await addCategoryMutation.mutateAsync({
        description: "CLEAR",
        name: "CLEAR",
      });
      const location = await addLocationMutation.mutateAsync({
        addressLine1: "CLEAR",
        city: "CLEAR",
        state: "CLEAR",
        country: "CLEAR",
        coordinates: {
          latitude: 0,
          longitude: 0,
        },
      });
      const item = await addItemMutation.mutateAsync({
        title: "CLEAR",
        description: "CLEAR",
        category: category.createCategory.id,
        location: location.createLocation.id,
        variant: ItemType.Inkind,
        intentAction: ItemIntentAction.Offer,
        condition: ItemCondition.BrandNew,
        status: ItemStatus.Active,
      });
      await updateItemMutation.mutateAsync({
        id: item.createItem.id,
        condition: ItemCondition.BrandNew,
        status: ItemStatus.Active,
      });

      // Clear collections
      await addCollectionMutation.mutateAsync({
        idCommunity: 0,
        title: "CLEAR",
        visibility: CollectionVisibility.Restricted,
        variant: CollectionType.Regular,
        position: 0,
      });

      setSuccess("Successfully cleared all data");
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
    } finally {
      setIsLoading(null);
    }
  };

  return (
    <div className="container mx-auto p-6">
      <h1 className="mb-6 text-3xl font-bold">GraphQL Mock Data Generator</h1>

      {!isAuthenticated && (
        <Alert variant="destructive" className="mb-4">
          <AlertTitle>Authentication Required</AlertTitle>
          <AlertDescription>
            Please log in to use this feature.
          </AlertDescription>
        </Alert>
      )}

      {error && (
        <Alert variant="destructive" className="mb-4">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {success && (
        <Alert className="mb-4">
          <AlertTitle>Success</AlertTitle>
          <AlertDescription>{success}</AlertDescription>
        </Alert>
      )}

      <Tabs defaultValue="accounts" className="w-full">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="accounts" disabled={!isAuthenticated}>
            Accounts
          </TabsTrigger>
          <TabsTrigger value="communities" disabled={!isAuthenticated}>
            Communities
          </TabsTrigger>
          <TabsTrigger value="items" disabled={!isAuthenticated}>
            Items
          </TabsTrigger>
          <TabsTrigger value="collections" disabled={!isAuthenticated}>
            Collections
          </TabsTrigger>
          <TabsTrigger value="all" disabled={!isAuthenticated}>
            All Data
          </TabsTrigger>
        </TabsList>

        <TabsContent value="accounts">
          <Card>
            <CardHeader>
              <CardTitle>Account & Profile Data</CardTitle>
              <CardDescription>
                Generate mock accounts and profiles
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Button
                  onClick={() => handleGenerate("accounts")}
                  disabled={isLoading === "accounts" || !isAuthenticated}
                >
                  {isLoading === "accounts" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Accounts
                </Button>
                <Button
                  onClick={() => handleGenerate("profiles")}
                  disabled={isLoading === "profiles" || !isAuthenticated}
                >
                  {isLoading === "profiles" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Profiles
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="communities">
          <Card>
            <CardHeader>
              <CardTitle>Community Data</CardTitle>
              <CardDescription>
                Generate mock communities and committees
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Button
                  onClick={() => handleGenerate("communities")}
                  disabled={isLoading === "communities" || !isAuthenticated}
                >
                  {isLoading === "communities" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Communities
                </Button>
                <Button
                  onClick={() => handleGenerate("committees")}
                  disabled={isLoading === "committees" || !isAuthenticated}
                >
                  {isLoading === "committees" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Committees
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="items">
          <Card>
            <CardHeader>
              <CardTitle>Item Data</CardTitle>
              <CardDescription>
                Generate mock items, categories, and locations
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Button
                  onClick={() => handleGenerate("categories")}
                  disabled={isLoading === "categories" || !isAuthenticated}
                >
                  {isLoading === "categories" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Categories
                </Button>
                <Button
                  onClick={() => handleGenerate("locations")}
                  disabled={isLoading === "locations" || !isAuthenticated}
                >
                  {isLoading === "locations" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Locations
                </Button>
                <Button
                  onClick={() => handleGenerate("items")}
                  disabled={isLoading === "items" || !isAuthenticated}
                >
                  {isLoading === "items" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Items
                </Button>
                <Button
                  onClick={() => handleGenerate("media")}
                  disabled={isLoading === "media" || !isAuthenticated}
                >
                  {isLoading === "media" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Media
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="collections">
          <Card>
            <CardHeader>
              <CardTitle>Collection Data</CardTitle>
              <CardDescription>
                Generate mock collections and publishes
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Button
                  onClick={() => handleGenerate("collections")}
                  disabled={isLoading === "collections" || !isAuthenticated}
                >
                  {isLoading === "collections" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Collections
                </Button>
                <Button
                  onClick={() => handleGenerate("publishes")}
                  disabled={isLoading === "publishes" || !isAuthenticated}
                >
                  {isLoading === "publishes" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Publishes
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="all">
          <Card>
            <CardHeader>
              <CardTitle>Generate All Data</CardTitle>
              <CardDescription>
                Generate all mock data in the correct order
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Button
                  onClick={() => handleGenerate("all")}
                  disabled={isLoading === "all" || !isAuthenticated}
                >
                  {isLoading === "all" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate All Data
                </Button>
                <Button
                  variant="destructive"
                  onClick={handleClear}
                  disabled={isLoading === "clear" || !isAuthenticated}
                >
                  {isLoading === "clear" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Clear All Data
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
