import React from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "../components/ui/card";
import { Button } from "../components/ui/button";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "../components/ui/tabs";
import { Alert, AlertDescription, AlertTitle } from "../components/ui/alert";
import { Loader2 } from "lucide-react";
import { useMutation } from "@tanstack/react-query";
import { request } from "graphql-request";
import {
  AddAccountDocument,
  AddProfileDocument,
  AddCommunityDocument,
  AddCommitteeDocument,
  AddCategoryDocument,
  AddLocationDocument,
  AddItemDocument,
  AddMediaDocument,
  AddCollectionDocument,
  AddPublishDocument,
  AddAccountMutation,
  AddProfileMutation,
  AddCommunityMutation,
  AddCommitteeMutation,
  AddCategoryMutation,
  AddLocationMutation,
  AddItemMutation,
  AddMediaMutation,
  AddCollectionMutation,
  AddPublishMutation,
} from "@/modules/graphql/autogenerated/graphql";
import { faker } from "@faker-js/faker";

export function MockGraphqlData() {
  const [isLoading, setIsLoading] = React.useState<string | null>(null);
  const [error, setError] = React.useState<string | null>(null);
  const [success, setSuccess] = React.useState<string | null>(null);

  const addAccountMutation = useMutation({
    mutationFn: async (variables: { id: string }) =>
      await request<AddAccountMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        AddAccountDocument.toString(),
        variables,
      ),
  });

  const addProfileMutation = useMutation({
    mutationFn: async (variables: {
      idAccount: string;
      name: string;
      bio?: string;
      avatarUrl?: string;
    }) =>
      await request<AddProfileMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        AddProfileDocument.toString(),
        variables,
      ),
  });

  const addCommunityMutation = useMutation({
    mutationFn: async (variables: {
      createdBy: string;
      description: string;
      name: string;
    }) =>
      await request<AddCommunityMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        AddCommunityDocument.toString(),
        variables,
      ),
  });

  const addCommitteeMutation = useMutation({
    mutationFn: async (variables: {
      idCommunity: number;
      idProfile: string;
      role: string;
    }) =>
      await request<AddCommitteeMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        AddCommitteeDocument.toString(),
        variables,
      ),
  });

  const addCategoryMutation = useMutation({
    mutationFn: async (variables: {
      description: string;
      name: string;
      parentId?: number;
    }) =>
      await request<AddCategoryMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        AddCategoryDocument.toString(),
        variables,
      ),
  });

  const addLocationMutation = useMutation({
    mutationFn: async (variables: {
      address: string;
      city: string;
      country: string;
      idProfile: string;
      name: string;
      postalCode: string;
      state: string;
    }) =>
      await request<AddLocationMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        AddLocationDocument.toString(),
        variables,
      ),
  });

  const addItemMutation = useMutation({
    mutationFn: async (variables: {
      description: string;
      idCategory: number;
      idLocation?: number;
      idProfile: string;
      title: string;
      currency?: string;
      price?: number;
    }) =>
      await request<AddItemMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        AddItemDocument.toString(),
        variables,
      ),
  });

  const addMediaMutation = useMutation({
    mutationFn: async (variables: {
      idItem: number;
      mediaType: string;
      position: number;
      url: string;
    }) =>
      await request<AddMediaMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        AddMediaDocument.toString(),
        variables,
      ),
  });

  const addCollectionMutation = useMutation({
    mutationFn: async (variables: {
      description: string;
      idProfile: string;
      isPublic: boolean;
      name: string;
    }) =>
      await request<AddCollectionMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        AddCollectionDocument.toString(),
        variables,
      ),
  });

  const addPublishMutation = useMutation({
    mutationFn: async (variables: {
      createdBy: string;
      idCollection: number;
      idItem: number;
      note?: string;
      position: number;
    }) =>
      await request<AddPublishMutation>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        AddPublishDocument.toString(),
        variables,
      ),
  });

  const handleGenerate = async (type: string) => {
    setIsLoading(type);
    setError(null);
    setSuccess(null);

    try {
      switch (type) {
        case "accounts": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          break;
        }
        case "profiles": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          await addProfileMutation.mutateAsync({
            idAccount: accountId,
            name: faker.person.fullName(),
            bio: faker.lorem.paragraph(),
            avatarUrl: faker.image.avatar(),
          });
          break;
        }
        case "communities": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          const profile = await addProfileMutation.mutateAsync({
            idAccount: accountId,
            name: faker.person.fullName(),
          });
          await addCommunityMutation.mutateAsync({
            createdBy: accountId,
            description: faker.lorem.paragraph(),
            name: faker.company.name(),
          });
          break;
        }
        case "committees": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          const profile = await addProfileMutation.mutateAsync({
            idAccount: accountId,
            name: faker.person.fullName(),
          });
          const community = await addCommunityMutation.mutateAsync({
            createdBy: accountId,
            description: faker.lorem.paragraph(),
            name: faker.company.name(),
          });
          await addCommitteeMutation.mutateAsync({
            idCommunity: community.addCommunity.id,
            idProfile: accountId,
            role: "MEMBER",
          });
          break;
        }
        case "categories": {
          await addCategoryMutation.mutateAsync({
            description: faker.lorem.sentence(),
            name: faker.commerce.department(),
          });
          break;
        }
        case "locations": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          const profile = await addProfileMutation.mutateAsync({
            idAccount: accountId,
            name: faker.person.fullName(),
          });
          await addLocationMutation.mutateAsync({
            address: faker.location.streetAddress(),
            city: faker.location.city(),
            country: faker.location.country(),
            idProfile: accountId,
            name: faker.location.streetAddress(),
            postalCode: faker.location.zipCode(),
            state: faker.location.state(),
          });
          break;
        }
        case "items": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          const profile = await addProfileMutation.mutateAsync({
            idAccount: accountId,
            name: faker.person.fullName(),
          });
          const category = await addCategoryMutation.mutateAsync({
            description: faker.lorem.sentence(),
            name: faker.commerce.department(),
          });
          const location = await addLocationMutation.mutateAsync({
            address: faker.location.streetAddress(),
            city: faker.location.city(),
            country: faker.location.country(),
            idProfile: accountId,
            name: faker.location.streetAddress(),
            postalCode: faker.location.zipCode(),
            state: faker.location.state(),
          });
          await addItemMutation.mutateAsync({
            description: faker.lorem.paragraph(),
            idCategory: category.addCategory.id,
            idLocation: location.addLocation.id,
            idProfile: accountId,
            title: faker.commerce.productName(),
          });
          break;
        }
        case "media": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          const profile = await addProfileMutation.mutateAsync({
            idAccount: accountId,
            name: faker.person.fullName(),
          });
          const category = await addCategoryMutation.mutateAsync({
            description: faker.lorem.sentence(),
            name: faker.commerce.department(),
          });
          const location = await addLocationMutation.mutateAsync({
            address: faker.location.streetAddress(),
            city: faker.location.city(),
            country: faker.location.country(),
            idProfile: accountId,
            name: faker.location.streetAddress(),
            postalCode: faker.location.zipCode(),
            state: faker.location.state(),
          });
          const item = await addItemMutation.mutateAsync({
            description: faker.lorem.paragraph(),
            idCategory: category.addCategory.id,
            idLocation: location.addLocation.id,
            idProfile: accountId,
            title: faker.commerce.productName(),
          });
          await addMediaMutation.mutateAsync({
            idItem: item.addItem.id,
            mediaType: "IMAGE",
            position: 1,
            url: faker.image.url(),
          });
          break;
        }
        case "collections": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          const profile = await addProfileMutation.mutateAsync({
            idAccount: accountId,
            name: faker.person.fullName(),
          });
          const community = await addCommunityMutation.mutateAsync({
            createdBy: accountId,
            description: faker.lorem.paragraph(),
            name: faker.company.name(),
          });
          await addCollectionMutation.mutateAsync({
            description: faker.lorem.sentence(),
            idProfile: accountId,
            isPublic: true,
            name: faker.commerce.productName(),
          });
          break;
        }
        case "publishes": {
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          const profile = await addProfileMutation.mutateAsync({
            idAccount: accountId,
            name: faker.person.fullName(),
          });
          const community = await addCommunityMutation.mutateAsync({
            createdBy: accountId,
            description: faker.lorem.paragraph(),
            name: faker.company.name(),
          });
          const collection = await addCollectionMutation.mutateAsync({
            description: faker.lorem.sentence(),
            idProfile: accountId,
            isPublic: true,
            name: faker.commerce.productName(),
          });
          const category = await addCategoryMutation.mutateAsync({
            description: faker.lorem.sentence(),
            name: faker.commerce.department(),
          });
          const location = await addLocationMutation.mutateAsync({
            address: faker.location.streetAddress(),
            city: faker.location.city(),
            country: faker.location.country(),
            idProfile: accountId,
            name: faker.location.streetAddress(),
            postalCode: faker.location.zipCode(),
            state: faker.location.state(),
          });
          const item = await addItemMutation.mutateAsync({
            description: faker.lorem.paragraph(),
            idCategory: category.addCategory.id,
            idLocation: location.addLocation.id,
            idProfile: accountId,
            title: faker.commerce.productName(),
          });
          await addPublishMutation.mutateAsync({
            createdBy: accountId,
            idCollection: collection.addCollection.id,
            idItem: item.addItem.id,
            note: faker.lorem.sentence(),
            position: 1,
          });
          break;
        }
        case "all": {
          // Generate accounts and profiles
          const accountId = faker.string.uuid();
          await addAccountMutation.mutateAsync({ id: accountId });
          const profile = await addProfileMutation.mutateAsync({
            idAccount: accountId,
            name: faker.person.fullName(),
            bio: faker.lorem.paragraph(),
            avatarUrl: faker.image.avatar(),
          });

          // Generate community and committee
          const community = await addCommunityMutation.mutateAsync({
            createdBy: accountId,
            description: faker.lorem.paragraph(),
            name: faker.company.name(),
          });
          await addCommitteeMutation.mutateAsync({
            idCommunity: community.addCommunity.id,
            idProfile: accountId,
            role: "MEMBER",
          });

          // Generate category and location
          const category = await addCategoryMutation.mutateAsync({
            description: faker.lorem.sentence(),
            name: faker.commerce.department(),
          });
          const location = await addLocationMutation.mutateAsync({
            address: faker.location.streetAddress(),
            city: faker.location.city(),
            country: faker.location.country(),
            idProfile: accountId,
            name: faker.location.streetAddress(),
            postalCode: faker.location.zipCode(),
            state: faker.location.state(),
          });

          // Generate item and media
          const item = await addItemMutation.mutateAsync({
            description: faker.lorem.paragraph(),
            idCategory: category.addCategory.id,
            idLocation: location.addLocation.id,
            idProfile: accountId,
            title: faker.commerce.productName(),
          });
          await addMediaMutation.mutateAsync({
            idItem: item.addItem.id,
            mediaType: "IMAGE",
            position: 1,
            url: faker.image.url(),
          });

          // Generate collection and publish
          const collection = await addCollectionMutation.mutateAsync({
            description: faker.lorem.sentence(),
            idProfile: accountId,
            isPublic: true,
            name: faker.commerce.productName(),
          });
          await addPublishMutation.mutateAsync({
            createdBy: accountId,
            idCollection: collection.addCollection.id,
            idItem: item.addItem.id,
            note: faker.lorem.sentence(),
            position: 1,
          });
          break;
        }
        default:
          throw new Error(`Unknown data type: ${type}`);
      }
      setSuccess(`Successfully generated ${type} data`);
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
    } finally {
      setIsLoading(null);
    }
  };

  const handleClear = async () => {
    setIsLoading("clear");
    setError(null);
    setSuccess(null);

    try {
      // Clear all data by generating a new account and using it to clear related data
      const accountId = faker.string.uuid();
      await addAccountMutation.mutateAsync({ id: accountId });

      // Clear profiles
      await addProfileMutation.mutateAsync({
        idAccount: accountId,
        name: "CLEAR",
        bio: "CLEAR",
      });

      // Clear communities
      await addCommunityMutation.mutateAsync({
        createdBy: accountId,
        description: "CLEAR",
        name: "CLEAR",
      });

      // Clear categories
      await addCategoryMutation.mutateAsync({
        description: "CLEAR",
        name: "CLEAR",
      });

      // Clear locations
      await addLocationMutation.mutateAsync({
        address: "CLEAR",
        city: "CLEAR",
        country: "CLEAR",
        idProfile: accountId,
        name: "CLEAR",
        postalCode: "CLEAR",
        state: "CLEAR",
      });

      // Clear items
      const category = await addCategoryMutation.mutateAsync({
        description: "CLEAR",
        name: "CLEAR",
      });
      const location = await addLocationMutation.mutateAsync({
        address: "CLEAR",
        city: "CLEAR",
        country: "CLEAR",
        idProfile: accountId,
        name: "CLEAR",
        postalCode: "CLEAR",
        state: "CLEAR",
      });
      await addItemMutation.mutateAsync({
        description: "CLEAR",
        idCategory: category.addCategory.id,
        idLocation: location.addLocation.id,
        idProfile: accountId,
        title: "CLEAR",
      });

      // Clear collections
      await addCollectionMutation.mutateAsync({
        description: "CLEAR",
        idProfile: accountId,
        isPublic: false,
        name: "CLEAR",
      });

      setSuccess("Successfully cleared all data");
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
    } finally {
      setIsLoading(null);
    }
  };

  return (
    <div className="container mx-auto p-6">
      <h1 className="mb-6 text-3xl font-bold">GraphQL Mock Data Generator</h1>

      {error && (
        <Alert variant="destructive" className="mb-4">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {success && (
        <Alert className="mb-4">
          <AlertTitle>Success</AlertTitle>
          <AlertDescription>{success}</AlertDescription>
        </Alert>
      )}

      <Tabs defaultValue="accounts" className="w-full">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="accounts">Accounts</TabsTrigger>
          <TabsTrigger value="communities">Communities</TabsTrigger>
          <TabsTrigger value="items">Items</TabsTrigger>
          <TabsTrigger value="collections">Collections</TabsTrigger>
          <TabsTrigger value="all">All Data</TabsTrigger>
        </TabsList>

        <TabsContent value="accounts">
          <Card>
            <CardHeader>
              <CardTitle>Account & Profile Data</CardTitle>
              <CardDescription>
                Generate mock accounts and profiles
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Button
                  onClick={() => handleGenerate("accounts")}
                  disabled={isLoading === "accounts"}
                >
                  {isLoading === "accounts" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Accounts
                </Button>
                <Button
                  onClick={() => handleGenerate("profiles")}
                  disabled={isLoading === "profiles"}
                >
                  {isLoading === "profiles" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Profiles
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="communities">
          <Card>
            <CardHeader>
              <CardTitle>Community Data</CardTitle>
              <CardDescription>
                Generate mock communities and committees
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Button
                  onClick={() => handleGenerate("communities")}
                  disabled={isLoading === "communities"}
                >
                  {isLoading === "communities" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Communities
                </Button>
                <Button
                  onClick={() => handleGenerate("committees")}
                  disabled={isLoading === "committees"}
                >
                  {isLoading === "committees" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Committees
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="items">
          <Card>
            <CardHeader>
              <CardTitle>Item Data</CardTitle>
              <CardDescription>
                Generate mock items, categories, and locations
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Button
                  onClick={() => handleGenerate("categories")}
                  disabled={isLoading === "categories"}
                >
                  {isLoading === "categories" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Categories
                </Button>
                <Button
                  onClick={() => handleGenerate("locations")}
                  disabled={isLoading === "locations"}
                >
                  {isLoading === "locations" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Locations
                </Button>
                <Button
                  onClick={() => handleGenerate("items")}
                  disabled={isLoading === "items"}
                >
                  {isLoading === "items" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Items
                </Button>
                <Button
                  onClick={() => handleGenerate("media")}
                  disabled={isLoading === "media"}
                >
                  {isLoading === "media" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Media
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="collections">
          <Card>
            <CardHeader>
              <CardTitle>Collection Data</CardTitle>
              <CardDescription>
                Generate mock collections and publishes
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Button
                  onClick={() => handleGenerate("collections")}
                  disabled={isLoading === "collections"}
                >
                  {isLoading === "collections" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Collections
                </Button>
                <Button
                  onClick={() => handleGenerate("publishes")}
                  disabled={isLoading === "publishes"}
                >
                  {isLoading === "publishes" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Publishes
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="all">
          <Card>
            <CardHeader>
              <CardTitle>Generate All Data</CardTitle>
              <CardDescription>
                Generate all mock data in the correct order
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Button
                  onClick={() => handleGenerate("all")}
                  disabled={isLoading === "all"}
                >
                  {isLoading === "all" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate All Data
                </Button>
                <Button
                  variant="destructive"
                  onClick={handleClear}
                  disabled={isLoading === "clear"}
                >
                  {isLoading === "clear" && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Clear All Data
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
