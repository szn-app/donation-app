import { faker } from "@faker-js/faker";
import {
  Account,
  Profile,
  Community,
  Committee,
  Category,
  Location,
  Item,
  Media,
  Collection,
  Publish,
  ProfileType,
  CommunityType,
  CommitteeRole,
  ItemCondition,
  ItemStatus,
  ItemType,
  ItemIntentAction,
  MediaType,
  CollectionType,
  CollectionVisibility,
} from "@/modules/graphql/autogenerated/graphql";

export class MockDataGenerator {
  static generateAccount(): Account {
    return {
      id: faker.string.uuid(),
      createdAt: faker.date.past(),
      remarks: faker.lorem.sentence(),
    };
  }

  static generateProfile(accountId: string): Profile {
    return {
      id: faker.number.int(),
      name: faker.person.fullName(),
      description: faker.lorem.paragraph(),
      type: faker.helpers.arrayElement([
        ProfileType.Individual,
        ProfileType.Company,
        ProfileType.Organization,
      ]),
      owner: accountId,
      createdBy: accountId,
      createdAt: faker.date.past(),
      updatedAt: faker.date.recent(),
    };
  }

  static generateCommunity(accountId: string): Community {
    return {
      id: faker.number.int(),
      title: faker.company.name(),
      description: faker.lorem.paragraph(),
      type: faker.helpers.arrayElement([
        CommunityType.Organized,
        CommunityType.Solo,
      ]),
      owner: accountId,
      createdBy: accountId,
      createdAt: faker.date.past(),
      updatedAt: faker.date.recent(),
    };
  }

  static generateCommittee(communityId: number, profileId: number): Committee {
    return {
      idCommunity: communityId,
      idProfile: profileId,
      memberRole: faker.helpers.arrayElement([
        CommitteeRole.Member,
        CommitteeRole.Organizer,
      ]),
      joinedAt: faker.date.past(),
    };
  }

  static generateCategory(parentId?: number): Category {
    return {
      id: faker.number.int(),
      title: faker.commerce.department(),
      description: faker.lorem.sentence(),
      categoryParent: parentId,
      createdAt: faker.date.past(),
      updatedAt: faker.date.recent(),
    };
  }

  static generateLocation(_profileId: string): Location {
    return {
      id: faker.number.int(),
      addressLine1: faker.location.streetAddress(),
      addressLine2: faker.location.secondaryAddress(),
      city: faker.location.city(),
      state: faker.location.state(),
      country: faker.location.country(),
      district: faker.location.county(),
      entranceNote: faker.lorem.sentence(),
      geom: faker.location.longitude() + "," + faker.location.latitude(),
      createdAt: faker.date.past(),
      updatedAt: faker.date.recent(),
    };
  }

  static generateItem(categoryId: number, locationId: number): Item {
    return {
      id: faker.number.int(),
      title: faker.commerce.productName(),
      description: faker.lorem.paragraph(),
      type: faker.helpers.arrayElement([
        ItemType.InKind,
        ItemType.Monetary,
        ItemType.Service,
        ItemType.Inquiry,
      ]),
      condition: faker.helpers.arrayElement([
        ItemCondition.BrandNew,
        ItemCondition.PreOwnedBarelyUsed,
        ItemCondition.PreOwnedUsable,
        ItemCondition.PreOwnedDamaged,
      ]),
      status: faker.helpers.arrayElement([
        ItemStatus.Active,
        ItemStatus.Archived,
        ItemStatus.Disabled,
        ItemStatus.Draft,
      ]),
      intentAction: faker.helpers.arrayElement([
        ItemIntentAction.Offer,
        ItemIntentAction.Request,
      ]),
      quantity: faker.number.int({ min: 1, max: 100 }),
      idCategory: categoryId,
      idLocation: locationId,
      createdAt: faker.date.past(),
      updatedAt: faker.date.recent(),
    };
  }

  static generateMedia(itemId: number): Media {
    return {
      id: faker.number.int(),
      idItem: itemId,
      type: faker.helpers.arrayElement([MediaType.Image, MediaType.Video]),
      url: faker.image.url(),
      caption: faker.lorem.sentence(),
      createdAt: faker.date.past(),
      updatedAt: faker.date.recent(),
    };
  }

  static generateCollection(communityId: number): Collection {
    return {
      id: faker.number.int(),
      idCommunity: communityId,
      title: faker.commerce.productName(),
      type: faker.helpers.arrayElement([
        CollectionType.Featured,
        CollectionType.Regular,
      ]),
      visibility: faker.helpers.arrayElement([
        CollectionVisibility.Public,
        CollectionVisibility.Restricted,
      ]),
      position: faker.number.int({ min: 1, max: 100 }),
      createdAt: faker.date.past(),
      updatedAt: faker.date.recent(),
    };
  }

  static generatePublish(
    collectionId: number,
    itemId: number,
    addedBy: string,
  ): Publish {
    return {
      idCollection: collectionId,
      idItem: itemId,
      position: faker.number.int({ min: 1, max: 100 }),
      note: faker.lorem.sentence(),
      addedBy,
      createdAt: faker.date.past(),
      updatedAt: faker.date.recent(),
    };
  }
}
