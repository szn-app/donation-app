import React, { useMemo, useEffect } from "react";
import { z } from "zod";
import { useAuth } from "react-oidc-context";
import { request } from "graphql-request";
import { useQuery } from "@tanstack/react-query";
import { graphql } from "@/modules/graphql/autogenerated/gql";

import { TestSchema } from "@/modules/graphql/autogenerated/runtime-validate";
import {
  Test,
  GetTestListQuery,
  GetTestListDocument,
  GetTestListPartialQuery,
} from "@/modules/graphql/autogenerated/graphql";

// do not query `s` field
const GET_TEST_LIST_PARTIAL_DOCUMENT = graphql(`
  query GetTestListPartial {
    listTests {
      i
      d
    }
  }
`);

export const E = ExampleGraphqlPartial;

export function ExampleGraphqlPartial() {
  const auth = useAuth();

  const headers = useMemo<Record<string, string> | undefined>(() => {
      const token = auth?.user?.access_token;
      return token ? { "Authorization": `Bearer ${token}` } : undefined; 
    }, 
    [auth]
  );

  const { data, isLoading, isError, error } = useQuery({
    queryKey: ["cache-key-1", auth.isAuthenticated, auth?.user?.access_token],
    queryFn: async () => {
      return await request<GetTestListPartialQuery>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        GET_TEST_LIST_PARTIAL_DOCUMENT.toString(),
        undefined,
        headers
      )
    },
    // parsing setp to match expected types to returned values on runtime
    select: (raw) => ({
      tests: raw.listTests.map((test) => {
        const { data, error, success } = TestSchema().partial().safeParse(test);
        if (!success) {
          console.error("Validation failed for test:", error);
          // Optionally return a fallback value or rethrow the error
          throw error;
        }
        return data;
      }),
    }),
  });

  if (isLoading) return <p>Loading...</p>;
  if (isError) return <p>Error: {error.message} </p>;

  const tests = data?.tests;

  return tests ? (
    <div>
      <h1>Tests list:</h1>
      <ul>
        {tests.map((test, index) => (
          <li key={index}>
            <strong>{test.i}</strong> — {test.d?.toISOString()}
          </li>
        ))}
      </ul>
    </div>
  ) : (
    <>No items present.</>
  );
}

export function ExampleGraphqlZodParsing() {
  const { data, isLoading, isError, error } = useQuery({
    queryKey: ["cache-key-1"],
    queryFn: async () =>
      await request<GetTestListQuery>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        GetTestListDocument.toString(),
      ),
    // parsing setp to match expected types to returned values on runtime
    select: (raw) => ({
      tests: raw.listTests.map((test) => {
        const { data, error, success } = TestSchema().safeParse(test);
        if (!success) {
          console.error("Validation failed for test:", error);
          // Optionally return a fallback value or rethrow the error
          throw error;
        }
        return data;
      }),
    }),
  });

  if (isLoading) return <p>Loading...</p>;
  if (isError) return <p>Error: {error.message} </p>;

  const tests = data?.tests;

  return tests ? (
    <div>
      <h1>Tests list:</h1>
      <ul>
        {tests.map((test, _index) => (
          <li key={test.i}>
            <strong>{test.s}</strong> — {test.d.toISOString()}
          </li>
        ))}
      </ul>
    </div>
  ) : (
    <>No items present.</>
  );
}

export function ExampleGraphqlQueryIntegratedParsing() {
  const { data, isLoading, isError, error } = useQuery<GetTestListQuery>({
    queryKey: ["dummy"],
    queryFn: async () => {
      const response = await request<GetTestListQuery>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        GetTestListDocument.toString(),
      );

      return response;
    },
    // parsing setp to match types on runtime
    select: (data) => ({
      listTests: data.listTests.map((test) => ({
        ...test,
        d: new Date(test.d),
      })),
    }),
  });

  if (isLoading) return <p>Loading...</p>;
  if (isError) return <p>Error: {error.message} </p>;

  const tests = data?.listTests;

  return tests ? (
    <div>
      <h1>Tests list:</h1>
      <ul>
        {tests.map((test, i) => (
          <li key={i}>
            <strong>{test.i}</strong> — {test.d.toISOString()}
          </li>
        ))}
      </ul>
    </div>
  ) : (
    <>Loading ...</>
  );
}

export function ExampleGraphqlFetchManualParsing() {
  useEffect(() => {
    async function fetch_data() {
      const { listTests } = await request<GetTestListQuery>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        GetTestListDocument.toString(),
      );

      return listTests as Test[];
    }

    try {
      fetch_data().then((tests) => {
        // NOTE: response still requires parsing on runtime;

        console.log(typeof tests[0].d);
        console.log(typeof new Date(tests[0].d as unknown as string));

        let d = new Date(tests[0].d as unknown as string);
        console.log(d.toISOString());
      });
    } catch (e) {
      console.error(e);
    }

    return () => {};
  }, []);

  return <h1>END</h1>;
}

// usage example query
export function ExampleGraphqlWithoutAuth() {
  // NOTE: typescipt doesn't enforce types at runtime, thus parsing is required
  const { data, isLoading, isError, error } = useQuery<GetTestListQuery>({
    queryKey: ["dummy"],
    queryFn: async (): Promise<GetTestListQuery> => {
      const r = await request<GetTestListQuery>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        GetTestListDocument.toString(),
      );

      return r;
    },
  });

  if (isLoading) return <p>Loading...</p>;
  if (isError) return <p>Error: {error.message} </p>;

  const tests = data?.listTests;

  return tests ? (
    <div>
      <h1>Tests list:</h1>
      <ul>
        {tests.map((test, i) => (
          <li key={i}>
            <strong>{test.i}</strong> — {test.d.toISOString()}
          </li>
        ))}
      </ul>
    </div>
  ) : (
    <>Loading ...</>
  );
}

// usage example with authorization header
export function ExampleGraphqlWIthAuth() {
  const auth = useAuth();
  const token = auth?.user?.access_token;

  const headers: Record<string, string> | undefined = token
    ? { Authorization: `Bearer ${token}` }
    : undefined;

  const { data, isLoading, isError, error } = useQuery<GetTestListQuery>({
    queryKey: ["dummy"],
    queryFn: async () =>
      request<GetTestListQuery>(
        import.meta.env.VITE_GRAPHQL_ENDPOINT,
        GetTestListDocument.toString(),
        undefined,
        headers,
      ),
  });

  if (isLoading) return <p>Loading...</p>;
  if (isError) return <p>Error: {error.message} </p>;

  const tests = data?.listTests;

  return tests ? (
    <div>
      <h1>Tests list:</h1>
      <ul>
        {tests.map((test, i) => (
          <li key={i}>
            <strong>{test.i}</strong> — {test.d.toISOString()}
          </li>
        ))}
      </ul>
    </div>
  ) : (
    <>Loading ...</>
  );
}
