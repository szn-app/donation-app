/* eslint-disable */
import * as types from './graphql';



/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query GetTestListPartial {\n    tests {\n      i\n      d\n    }\n  }\n": typeof types.GetTestListPartialDocument,
    "mutation AddAccount($id: UUID!) {\n  addAccount(id: $id) {\n    id\n    createdAt\n    remarks\n  }\n}\n\nmutation AddProfile($idAccount: UUID!, $name: String!, $bio: String, $avatarUrl: String) {\n  addProfile(idAccount: $idAccount, name: $name, bio: $bio, avatarUrl: $avatarUrl) {\n    id\n    name\n    type\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddCommunity($createdBy: UUID!, $description: String!, $name: String!) {\n  addCommunity(createdBy: $createdBy, description: $description, name: $name) {\n    id\n    title\n    description\n    type\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddCommittee($idCommunity: Int!, $idProfile: UUID!, $role: String!) {\n  addCommittee(idCommunity: $idCommunity, idProfile: $idProfile, role: $role) {\n    idCommunity\n    idProfile\n    memberRole\n    joinedAt\n  }\n}\n\nmutation AddCategory($description: String!, $name: String!, $parentId: Int) {\n  addCategory(description: $description, name: $name, parentId: $parentId) {\n    id\n    title\n    description\n    categoryParent\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddLocation($address: String!, $city: String!, $country: String!, $idProfile: UUID!, $name: String!, $postalCode: String!, $state: String!) {\n  addLocation(\n    address: $address\n    city: $city\n    country: $country\n    idProfile: $idProfile\n    name: $name\n    postalCode: $postalCode\n    state: $state\n  ) {\n    id\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    district\n    entranceNote\n    geom\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddItem($currency: String, $description: String!, $idCategory: Int!, $idLocation: Int, $idProfile: UUID!, $price: Float, $title: String!) {\n  addItem(\n    currency: $currency\n    description: $description\n    idCategory: $idCategory\n    idLocation: $idLocation\n    idProfile: $idProfile\n    price: $price\n    title: $title\n  ) {\n    id\n    title\n    description\n    status\n    type\n    condition\n    intentAction\n    quantity\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddMedia($idItem: Int!, $mediaType: String!, $position: Int!, $url: String!) {\n  addMedia(idItem: $idItem, mediaType: $mediaType, position: $position, url: $url) {\n    id\n    url\n    type\n    caption\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddCollection($description: String!, $idProfile: UUID!, $isPublic: Boolean!, $name: String!) {\n  addCollection(\n    description: $description\n    idProfile: $idProfile\n    isPublic: $isPublic\n    name: $name\n  ) {\n    id\n    title\n    type\n    visibility\n    position\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddPublish($createdBy: UUID!, $idCollection: Int!, $idItem: Int!, $note: String, $position: Int!) {\n  addPublish(\n    createdBy: $createdBy\n    idCollection: $idCollection\n    idItem: $idItem\n    note: $note\n    position: $position\n  ) {\n    idCollection\n    idItem\n    position\n    note\n    addedBy\n    createdAt\n    updatedAt\n  }\n}": typeof types.AddAccountDocument,
    "query GetAccounts {\n  accounts {\n    id\n    createdAt\n    remarks\n  }\n}\n\nquery GetProfiles {\n  profiles {\n    id\n    name\n    type\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetCommunities {\n  communities {\n    id\n    title\n    description\n    type\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetCommitteesByCommunity($idCommunity: Int!) {\n  committeesByCommunity(idCommunity: $idCommunity) {\n    idCommunity\n    idProfile\n    memberRole\n    joinedAt\n  }\n}\n\nquery GetCategories {\n  getCategories {\n    id\n    title\n    description\n    categoryParent\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetItemsByCategory($categoryId: Int!) {\n  getItemsByCategory(categoryId: $categoryId) {\n    id\n    title\n    description\n    status\n    type\n    condition\n    intentAction\n    quantity\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetLocations {\n  getLocations {\n    id\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    district\n    entranceNote\n    geom\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetCollections {\n  getCollections {\n    id\n    title\n    type\n    visibility\n    position\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPublishesByCollection($collectionId: Int!) {\n  getPublishesByCollection(collectionId: $collectionId) {\n    idCollection\n    idItem\n    position\n    note\n    addedBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetItemById($id: Int!) {\n  getItemById(id: $id) {\n    id\n    title\n    description\n    status\n    type\n    condition\n    intentAction\n    quantity\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetItems {\n  getItems {\n    id\n    title\n    description\n    status\n    type\n    condition\n    intentAction\n    quantity\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetMediaByItem($itemId: Int!) {\n  getMediaByItem(itemId: $itemId) {\n    id\n    url\n    type\n    caption\n    createdAt\n    updatedAt\n  }\n}": typeof types.GetAccountsDocument,
    "query GetAccountList {\n  accounts {\n    id\n    createdAt\n  }\n}\n\nquery GetTestList {\n  tests {\n    i\n    s\n    d\n  }\n}": typeof types.GetAccountListDocument,
};
const documents: Documents = {
    "\n  query GetTestListPartial {\n    tests {\n      i\n      d\n    }\n  }\n": types.GetTestListPartialDocument,
    "mutation AddAccount($id: UUID!) {\n  addAccount(id: $id) {\n    id\n    createdAt\n    remarks\n  }\n}\n\nmutation AddProfile($idAccount: UUID!, $name: String!, $bio: String, $avatarUrl: String) {\n  addProfile(idAccount: $idAccount, name: $name, bio: $bio, avatarUrl: $avatarUrl) {\n    id\n    name\n    type\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddCommunity($createdBy: UUID!, $description: String!, $name: String!) {\n  addCommunity(createdBy: $createdBy, description: $description, name: $name) {\n    id\n    title\n    description\n    type\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddCommittee($idCommunity: Int!, $idProfile: UUID!, $role: String!) {\n  addCommittee(idCommunity: $idCommunity, idProfile: $idProfile, role: $role) {\n    idCommunity\n    idProfile\n    memberRole\n    joinedAt\n  }\n}\n\nmutation AddCategory($description: String!, $name: String!, $parentId: Int) {\n  addCategory(description: $description, name: $name, parentId: $parentId) {\n    id\n    title\n    description\n    categoryParent\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddLocation($address: String!, $city: String!, $country: String!, $idProfile: UUID!, $name: String!, $postalCode: String!, $state: String!) {\n  addLocation(\n    address: $address\n    city: $city\n    country: $country\n    idProfile: $idProfile\n    name: $name\n    postalCode: $postalCode\n    state: $state\n  ) {\n    id\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    district\n    entranceNote\n    geom\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddItem($currency: String, $description: String!, $idCategory: Int!, $idLocation: Int, $idProfile: UUID!, $price: Float, $title: String!) {\n  addItem(\n    currency: $currency\n    description: $description\n    idCategory: $idCategory\n    idLocation: $idLocation\n    idProfile: $idProfile\n    price: $price\n    title: $title\n  ) {\n    id\n    title\n    description\n    status\n    type\n    condition\n    intentAction\n    quantity\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddMedia($idItem: Int!, $mediaType: String!, $position: Int!, $url: String!) {\n  addMedia(idItem: $idItem, mediaType: $mediaType, position: $position, url: $url) {\n    id\n    url\n    type\n    caption\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddCollection($description: String!, $idProfile: UUID!, $isPublic: Boolean!, $name: String!) {\n  addCollection(\n    description: $description\n    idProfile: $idProfile\n    isPublic: $isPublic\n    name: $name\n  ) {\n    id\n    title\n    type\n    visibility\n    position\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddPublish($createdBy: UUID!, $idCollection: Int!, $idItem: Int!, $note: String, $position: Int!) {\n  addPublish(\n    createdBy: $createdBy\n    idCollection: $idCollection\n    idItem: $idItem\n    note: $note\n    position: $position\n  ) {\n    idCollection\n    idItem\n    position\n    note\n    addedBy\n    createdAt\n    updatedAt\n  }\n}": types.AddAccountDocument,
    "query GetAccounts {\n  accounts {\n    id\n    createdAt\n    remarks\n  }\n}\n\nquery GetProfiles {\n  profiles {\n    id\n    name\n    type\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetCommunities {\n  communities {\n    id\n    title\n    description\n    type\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetCommitteesByCommunity($idCommunity: Int!) {\n  committeesByCommunity(idCommunity: $idCommunity) {\n    idCommunity\n    idProfile\n    memberRole\n    joinedAt\n  }\n}\n\nquery GetCategories {\n  getCategories {\n    id\n    title\n    description\n    categoryParent\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetItemsByCategory($categoryId: Int!) {\n  getItemsByCategory(categoryId: $categoryId) {\n    id\n    title\n    description\n    status\n    type\n    condition\n    intentAction\n    quantity\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetLocations {\n  getLocations {\n    id\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    district\n    entranceNote\n    geom\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetCollections {\n  getCollections {\n    id\n    title\n    type\n    visibility\n    position\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPublishesByCollection($collectionId: Int!) {\n  getPublishesByCollection(collectionId: $collectionId) {\n    idCollection\n    idItem\n    position\n    note\n    addedBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetItemById($id: Int!) {\n  getItemById(id: $id) {\n    id\n    title\n    description\n    status\n    type\n    condition\n    intentAction\n    quantity\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetItems {\n  getItems {\n    id\n    title\n    description\n    status\n    type\n    condition\n    intentAction\n    quantity\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetMediaByItem($itemId: Int!) {\n  getMediaByItem(itemId: $itemId) {\n    id\n    url\n    type\n    caption\n    createdAt\n    updatedAt\n  }\n}": types.GetAccountsDocument,
    "query GetAccountList {\n  accounts {\n    id\n    createdAt\n  }\n}\n\nquery GetTestList {\n  tests {\n    i\n    s\n    d\n  }\n}": types.GetAccountListDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetTestListPartial {\n    tests {\n      i\n      d\n    }\n  }\n"): typeof import('./graphql').GetTestListPartialDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AddAccount($id: UUID!) {\n  addAccount(id: $id) {\n    id\n    createdAt\n    remarks\n  }\n}\n\nmutation AddProfile($idAccount: UUID!, $name: String!, $bio: String, $avatarUrl: String) {\n  addProfile(idAccount: $idAccount, name: $name, bio: $bio, avatarUrl: $avatarUrl) {\n    id\n    name\n    type\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddCommunity($createdBy: UUID!, $description: String!, $name: String!) {\n  addCommunity(createdBy: $createdBy, description: $description, name: $name) {\n    id\n    title\n    description\n    type\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddCommittee($idCommunity: Int!, $idProfile: UUID!, $role: String!) {\n  addCommittee(idCommunity: $idCommunity, idProfile: $idProfile, role: $role) {\n    idCommunity\n    idProfile\n    memberRole\n    joinedAt\n  }\n}\n\nmutation AddCategory($description: String!, $name: String!, $parentId: Int) {\n  addCategory(description: $description, name: $name, parentId: $parentId) {\n    id\n    title\n    description\n    categoryParent\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddLocation($address: String!, $city: String!, $country: String!, $idProfile: UUID!, $name: String!, $postalCode: String!, $state: String!) {\n  addLocation(\n    address: $address\n    city: $city\n    country: $country\n    idProfile: $idProfile\n    name: $name\n    postalCode: $postalCode\n    state: $state\n  ) {\n    id\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    district\n    entranceNote\n    geom\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddItem($currency: String, $description: String!, $idCategory: Int!, $idLocation: Int, $idProfile: UUID!, $price: Float, $title: String!) {\n  addItem(\n    currency: $currency\n    description: $description\n    idCategory: $idCategory\n    idLocation: $idLocation\n    idProfile: $idProfile\n    price: $price\n    title: $title\n  ) {\n    id\n    title\n    description\n    status\n    type\n    condition\n    intentAction\n    quantity\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddMedia($idItem: Int!, $mediaType: String!, $position: Int!, $url: String!) {\n  addMedia(idItem: $idItem, mediaType: $mediaType, position: $position, url: $url) {\n    id\n    url\n    type\n    caption\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddCollection($description: String!, $idProfile: UUID!, $isPublic: Boolean!, $name: String!) {\n  addCollection(\n    description: $description\n    idProfile: $idProfile\n    isPublic: $isPublic\n    name: $name\n  ) {\n    id\n    title\n    type\n    visibility\n    position\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AddPublish($createdBy: UUID!, $idCollection: Int!, $idItem: Int!, $note: String, $position: Int!) {\n  addPublish(\n    createdBy: $createdBy\n    idCollection: $idCollection\n    idItem: $idItem\n    note: $note\n    position: $position\n  ) {\n    idCollection\n    idItem\n    position\n    note\n    addedBy\n    createdAt\n    updatedAt\n  }\n}"): typeof import('./graphql').AddAccountDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAccounts {\n  accounts {\n    id\n    createdAt\n    remarks\n  }\n}\n\nquery GetProfiles {\n  profiles {\n    id\n    name\n    type\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetCommunities {\n  communities {\n    id\n    title\n    description\n    type\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetCommitteesByCommunity($idCommunity: Int!) {\n  committeesByCommunity(idCommunity: $idCommunity) {\n    idCommunity\n    idProfile\n    memberRole\n    joinedAt\n  }\n}\n\nquery GetCategories {\n  getCategories {\n    id\n    title\n    description\n    categoryParent\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetItemsByCategory($categoryId: Int!) {\n  getItemsByCategory(categoryId: $categoryId) {\n    id\n    title\n    description\n    status\n    type\n    condition\n    intentAction\n    quantity\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetLocations {\n  getLocations {\n    id\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    district\n    entranceNote\n    geom\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetCollections {\n  getCollections {\n    id\n    title\n    type\n    visibility\n    position\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPublishesByCollection($collectionId: Int!) {\n  getPublishesByCollection(collectionId: $collectionId) {\n    idCollection\n    idItem\n    position\n    note\n    addedBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetItemById($id: Int!) {\n  getItemById(id: $id) {\n    id\n    title\n    description\n    status\n    type\n    condition\n    intentAction\n    quantity\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetItems {\n  getItems {\n    id\n    title\n    description\n    status\n    type\n    condition\n    intentAction\n    quantity\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetMediaByItem($itemId: Int!) {\n  getMediaByItem(itemId: $itemId) {\n    id\n    url\n    type\n    caption\n    createdAt\n    updatedAt\n  }\n}"): typeof import('./graphql').GetAccountsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAccountList {\n  accounts {\n    id\n    createdAt\n  }\n}\n\nquery GetTestList {\n  tests {\n    i\n    s\n    d\n  }\n}"): typeof import('./graphql').GetAccountListDocument;


export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}
