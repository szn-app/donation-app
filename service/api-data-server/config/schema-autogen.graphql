type Account {
	id: UUID!
	remarks: String
	createdAt: DateTime!
}

type Category {
	id: Int!
	title: String!
	description: String
	categoryParent: Int
}

type Collection {
	id: Int!
	idCommunity: Int
	title: String
	visibility: CollectionVisibility!
	variant: CollectionType
	position: Int!
	createdAt: DateTime!
	updatedAt: DateTime
}

enum CollectionType {
	featured
	regular
}

enum CollectionVisibility {
	public
	restricted
}

type Committee {
	idProfile: Int!
	idCommunity: Int!
	memberRole: CommitteeRole!
	joined_at: DateTime!
}

enum CommitteeRole {
	organizer
	member
}

type Community {
	id: Int!
	title: String!
	description: String
	variant: CommunityType!
	owner: UUID!
	createdAt: DateTime!
	updatedAt: DateTime
	createdBy: UUID!
}

enum CommunityType {
	solo
	organized
}

"""
Convertion flow:
- CoordinatesInput -> GeoPoint -> PostGisPoint -> Database
- Database -> PostGisPoint -> GeoPoint -> Coordinates (for GraphQL)
"""
type Coordinates {
	longitude: Float!
	latitude: Float!
}

input CoordinatesInput {
	longitude: Float!
	latitude: Float!
}

"""
A datetime with timezone offset.

The input is a string in RFC3339 format, e.g. "2022-01-12T04:00:19.12345Z"
or "2022-01-12T04:00:19+03:00". The output is also a string in RFC3339
format, but it is always normalized to the UTC (Z) offset, e.g.
"2022-01-12T04:00:19.12345Z".
"""
scalar DateTime

type Item {
	id: Int!
	variant: ItemType
	intentAction: ItemIntentAction
	status: ItemStatus
	title: String
	description: String
	category: Int
	condition: ItemCondition
	location: Int
	viewsCount: Int!
	isReported: Boolean!
	createdAt: DateTime!
	updatedAt: DateTime
	createdBy: UUID
}

enum ItemCondition {
	brand_new
	pre_owned_barely_used
	pre_owned_usable
	pre_owned_damaged
}

enum ItemIntentAction {
	request
	offer
}

enum ItemStatus {
	draft
	active
	disabled
	archived
}

enum ItemType {
	inkind
	inquiry
	monetary
	service
}

type Location {
	id: Int!
	addressLine1: String!
	addressLine2: String
	city: String!
	state: String
	district: String
	country: String!
	entranceNote: String
	createdAt: DateTime!
	coordinates: Coordinates
}

type Media {
	id: Int!
	idItem: Int!
	caption: String
	url: String!
	variant: MediaType!
	createdAt: DateTime!
}

enum MediaType {
	document
	image
	video
}

type Message {
	id: Int!
	idSender: Int
	idTransaction: Int!
	variant: MessageType
	content: String!
	sent_at: DateTime!
	updatedAt: DateTime
}

enum MessageType {
	text
	schedule_opportunity
}

"""
GraphQL Mutation Root
"""
type Mutation {
	createAccount(id: UUID!, remarks: String): Account! @auth(permission: "required_authorization")
	updateAccount(id: UUID!, remarks: String): Account @auth(permission: "required_authorization")
	deleteAccount(id: UUID!): Boolean! @auth(permission: "required_authorization")
	createCommittee(idProfile: Int!, idCommunity: Int!, memberRole: CommitteeRole!): Committee! @auth(permission: "required_authorization")
	updateCommittee(idProfile: Int!, idCommunity: Int!, memberRole: CommitteeRole!): Committee @auth(permission: "required_authorization")
	deleteCommittee(idProfile: Int!, idCommunity: Int!): Boolean! @auth(permission: "required_authorization")
	createCommunity(name: String!, description: String, variant: CommunityType!, createdBy: UUID!): Community! @auth(permission: "required_authorization")
	updateCommunity(id: Int!, title: String, description: String, variant: CommunityType): Community @auth(permission: "required_authorization")
	deleteCommunity(id: Int!): Boolean! @auth(permission: "required_authorization")
	createProfile(idAccount: UUID!, name: String!, description: String): Profile! @auth(permission: "required_authorization")
	updateProfile(id: Int!, name: String!, description: String, variant: ProfileType): Profile @auth(permission: "required_authorization")
	deleteProfile(id: Int!): Boolean! @auth(permission: "required_authorization")
	createCategory(name: String!, description: String!, parentId: Int): Category! @auth(permission: "required_authorization")
	updateCategory(id: Int!, name: String, description: String, parentId: Int): Category! @auth(permission: "required_authorization")
	deleteCategory(id: Int!): Boolean! @auth(permission: "required_authorization")
	createLocation(addressLine1: String!, addressLine2: String, city: String!, state: String, district: String, country: String!, coordinates: CoordinatesInput, entranceNote: String): Location! @auth(permission: "required_authorization")
	updateLocation(id: Int!, addressLine1: String, addressLine2: String, city: String, state: String, district: String, country: String, coordinates: CoordinatesInput, entranceNote: String): Location! @auth(permission: "required_authorization")
	deleteLocation(id: Int!): Boolean! @auth(permission: "required_authorization")
	createItem(variant: ItemType, intentAction: ItemIntentAction, title: String, description: String, category: Int, condition: ItemCondition, location: Int, status: ItemStatus): Item! @auth(permission: "required_authorization")
	updateItem(id: Int!, status: ItemStatus, title: String, description: String, category: Int, condition: ItemCondition, location: Int): Item! @auth(permission: "required_authorization")
	deleteItem(id: Int!): Boolean! @auth(permission: "required_authorization")
	reportItem(id: Int!): Item @auth(permission: "required_authorization")
	createCollection(idCommunity: Int!, title: String!, visibility: CollectionVisibility!, variant: CollectionType!, position: Int!): Collection! @auth(permission: "required_authorization")
	updateCollection(id: Int!, title: String!, visibility: CollectionVisibility!, variant: CollectionType!, position: Int!): Collection! @auth(permission: "required_authorization")
	deleteCollection(id: Int!): Boolean! @auth(permission: "required_authorization")
	createMedia(idItem: Int!, url: String!, mediaType: MediaType!, position: Int!): Media! @auth(permission: "required_authorization")
	updateMedia(id: Int!, url: String, mediaType: MediaType, position: Int): Media! @auth(permission: "required_authorization")
	deleteMedia(id: Int!): Boolean! @auth(permission: "required_authorization")
	createPublish(idItem: Int!, idCollection: Int!, note: String, position: Int!, createdBy: UUID!): Publish! @auth(permission: "required_authorization")
	updatePublish(idItem: Int!, idCollection: Int!, note: String, position: Int!): Publish! @auth(permission: "required_authorization")
	deletePublish(idItem: Int!, idCollection: Int!): Boolean! @auth(permission: "required_authorization")
	create(idTransaction: Int!, idSender: UUID!, variant: MessageType!, content: String!): Message! @auth(permission: "required_authorization")
	update(id: Int!, status: TransactionStatus!): Transaction! @auth(permission: "required_authorization")
}

type Pledge {
	id: Int!
	idProfile: Int!
	idItem: Int!
	intentAction: PledgeIntentAction!
	message: String
	status: PledgeStatus!
	pledged_at: DateTime!
	updatedAt: DateTime
	updatedBy: UUID
}

enum PledgeIntentAction {
	give
	receive
}

enum PledgeStatus {
	pending
	approved
	declined
}

type Profile {
	id: Int!
	name: String
	description: String
	variant: ProfileType
	owner: UUID!
	createdAt: DateTime!
	updatedAt: DateTime
	createdBy: UUID!
}

enum ProfileType {
	individual
	organization
	company
}

type Publish {
	idItem: Int!
	idCollection: Int!
	note: String
	position: Int!
	addedBy: UUID
	posted_on: DateTime!
}

"""
GraphQL Query Root
"""
type Query {
	"""
	Get all accounts
	"""
	listAccounts: [Account!]! @auth(permission: "required_authorization")
	"""
	Get account by ID
	"""
	findAccount(id: UUID!): Account @auth(permission: "required_authorization")
	"""
	Get all committees
	"""
	listCommittees: [Committee!]! @auth(permission: "required_authorization")
	"""
	Get committee by ID
	"""
	findCommittee(id: UUID!): Committee @auth(permission: "required_authorization")
	"""
	Get all communities
	"""
	listCommunities: [Community!]! @auth(permission: "required_authorization")
	"""
	Get community by ID
	"""
	findCommunity(id: Int!): Community @auth(permission: "required_authorization")
	"""
	Get all profiles
	"""
	listProfiles: [Profile!]! @auth(permission: "required_authorization")
	"""
	Get profile by ID
	"""
	findProfile(id: Int!): Profile @auth(permission: "required_authorization")
	listCategories: [Category!]! @auth(permission: "required_authorization")
	findCategory(id: Int!): Category @auth(permission: "required_authorization")
	listLocations: [Location!]! @auth(permission: "required_authorization")
	findLocation(id: Int!): Location @auth(permission: "required_authorization")
	listItems(status: ItemStatus): [Item!]! @auth(permission: "required_authorization")
	findItem(id: Int!): Item @auth(permission: "required_authorization")
	listCollections: [Collection!]! @auth(permission: "required_authorization")
	findCollection(id: Int!): Collection @auth(permission: "required_authorization")
	listMedia: [Media!]! @auth(permission: "required_authorization")
	findMedia(id: Int!): Media @auth(permission: "required_authorization")
	listPublishes: [Publish!]! @auth(permission: "required_authorization")
	findPublish(id: Int!): Publish @auth(permission: "required_authorization")
	listReviews: [Review!]! @auth(permission: "required_authorization")
	listPledges: [Pledge!]! @auth(permission: "required_authorization")
	findPledge(id: Int!): Pledge @auth(permission: "required_authorization")
	listScheduleOpportunities: [ScheduleOpportunity!]! @auth(permission: "required_authorization")
	findScheduleOpportunity(id: Int!): ScheduleOpportunity @auth(permission: "required_authorization")
	listSchedules: [Schedule!]! @auth(permission: "required_authorization")
	findSchedule(id: Int!): Schedule @auth(permission: "required_authorization")
	listTransactions: [Transaction!]! @auth(permission: "required_authorization")
	findTransaction(id: Int!): Transaction @auth(permission: "required_authorization")
	listMessages: [Message!]! @auth(permission: "required_authorization")
	findMessage(id: Int!): Message @auth(permission: "required_authorization")
	listTests: [Test!]! @auth(permission: "required_authorization")
	dummyTest: [String!]!
	dummyTestRequestHeader: String!
	dummyTestSecure: Test!
	dummyTestSecurePermissionCheck: Test!
	dummyTestSecureGuard: Test! @auth(permission: "required_authorization")
}

type Review {
	idTransaction: Int!
	idSubjectProfile: Int!
	reviewer: Int!
	comment: String
	score: Int!
	createdAt: DateTime!
}

type Schedule {
	id: Int!
	scheduled_for: DateTime!
}

type ScheduleOpportunity {
	id: Int!
	windowStart: DateTime
	windowEnd: DateTime
}

type Test {
	i: Int!
	s: String!
	d: DateTime!
}

type Transaction {
	id: Int!
	idPledge: Int!
	status: TransactionStatus!
	idSchedule: Int
	idLocation: Int
	createdAt: DateTime!
	updatedAt: DateTime
}

enum TransactionStatus {
	inprogress
	completed
	cancelled
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique Identifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

"""
* Using async_graphql guards to enforce authorization, while using type system directives for metadata to mark graphql objects which require authentication
Authorization directive for marking fields or objects that require authorization.
This directive only adds metadata and does not enforce authorization.

# Parameters
* `permission` - Optional permission required for authorization
"""
directive @auth(permission: String) on FIELD_DEFINITION | OBJECT
"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
"""
Provides a scalar specification URL for specifying the behavior of custom scalar types.
"""
directive @specifiedBy(url: String!) on SCALAR
schema {
	query: Query
	mutation: Mutation
}
