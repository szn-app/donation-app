use tonic::{
    transport::Server as TonicServer, Request as TonicRequest, Response as TonicResponse, Status,
};

// import generated gRPC proto-rust file into module types/interfaces
mod proto_user_sync {
    tonic::include_proto!("user_sync"); // relies internally on `prost` 
}

// re-expost prost protobuf generated types/interaces
pub mod proto {
    pub mod user_sync {
        use super::super::*;

        pub use proto_user_sync::{
            user_sync_client::UserSyncClient,
            user_sync_server::{UserSync, UserSyncServer},
            AddUserRequest, AddUserResponse,
        };

        // File descriptor set generated by build.rs
        pub const DESCRIPTOR_SET: &[u8] = include_bytes!("protobuf/user_sync_descriptor.bin");
    }

    pub mod test {
        use super::super::*;
        // import generated gRPC proto-rust file into module
        mod proto_test {
            tonic::include_proto!("test");
        }

        pub use proto_test::{
            greeter_server::{Greeter, GreeterServer},
            HelloRequest, HelloResponse,
        };

        // File descriptor set generated by build.rs
        pub const DESCRIPTOR_SET: &[u8] = include_bytes!("protobuf/test_descriptor.bin");

        // example gRPC service implementation
        #[derive(Debug)]
        pub struct GreeterService;

        #[tonic::async_trait]
        impl Greeter for GreeterService {
            async fn say_hello(
                &self,
                request: TonicRequest<HelloRequest>,
            ) -> Result<TonicResponse<HelloResponse>, Status> {
                let reply = HelloResponse {
                    message: format!("Hello, {}!", request.into_inner().name),
                };
                Ok(TonicResponse::new(reply))
            }
        }
    }
}
