# automatically merge development PRs (features, hotfixes, etc.)

name: automerge-pull-request

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled] # unlabeled is required to support release-please (which for some reason doesn't trigger the other events when creating PR)
    branches: [main]
  workflow_dispatch:  
      
jobs:
  label_auto_merge:
    # avoid automerging release PRs
    if: ${{!contains(github.head_ref, 'release-please') && github.event.action != 'reopened' }}
    # condition: if PR originate from a `feature/*` or `hotfix/*` branches, etc.
    # if: startsWith(github.head_ref, 'hotfix/') || startsWith(github.head_ref, 'feature/')

    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      statuses: write

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: add automerge label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_WORKFLOW }}
          script: |
            const labelsToAdd = ['automerge'];
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labelsToAdd,
            });      

      # - name: merge PR
      #   run: |
      #     gh pr review --approve "${{ github.event.pull_request.html_url }}"
      #     gh pr merge "${{ github.event.pull_request.html_url }}" --squash --auto -t "${{ github.event.pull_request.title }}"
      #   env:
      #     GH_TOKEN: ${{ secrets.PAT_WORKFLOW }}
    
      # - name: add comment on PR
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: 'PR was automatically merged by GitHub Actions.'
      #       })
      #   env:
      #     GH_TOKEN: ${{ secrets.PAT_WORKFLOW }}

  # IMPORTANT! must setup "enforce-all-checks" as a required job in repo's setrule settings.
  enforce-all-checks:
    runs-on: ubuntu-latest
    permissions:
      checks: read

    steps:
      - name: verify non-required triggered GitHub Checks passedGitHub Checks
        uses: poseidon/wait-for-status-checks@v0.6.0
        with:
          token: ${{ secrets.PAT_WORKFLOW }}
          ignore_pattern: Mergeable*

  label-ready-to-merge:
    if: ${{ github.event.action != 'reopened' }}
    needs: enforce-all-checks
    permissions: 
      pull-requests: write 
      statuses: write
    runs-on: ubuntu-latest
    
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_WORKFLOW }}
    
      - name: add label 'ready-to-merge'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_WORKFLOW }}
          script: |
            const labelsToAdd = ['ready-to-merge'];
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labelsToAdd,
            });      

  automerge:
    needs: enforce-all-checks
    if: ${{!contains(github.head_ref, 'release-please')}}
    runs-on: ubuntu-latest
    permissions: 
        contents: write
        pull-requests: write
        statuses: write

    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_WORKFLOW }}
          ref: '${{github.head_ref}}'

      - name: update PR branch with merge commit
        run: |
          git fetch origin main
          git rebase origin/main 
          
      - name: Push changes
        run: |
          {
            current_branch=$(git rev-parse --abbrev-ref HEAD)
            if [[ "$current_branch" == "main" ]]; then
              echo "ERROR: should not be on main branch."
              echo "Please switch to a feature branch before force push."
              exit 1
            fi
          }
          git push origin HEAD -f

      - name: automerge PR
        run: |
          pr=${{github.event.number}}
          pr_title=$(gh pr view "$pr" --json title | jq -r '.title')
          gh pr merge $pr --squash --auto -t "$pr_title"
        env:
          GH_TOKEN: ${{ secrets.PAT_WORKFLOW }}
